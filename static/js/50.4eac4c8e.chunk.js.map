{"version":3,"file":"static/js/50.4eac4c8e.chunk.js","mappings":"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","sources":["api/service/auth.ts","hooks/useTitle.ts","pages/Auth/Register.tsx"],"sourcesContent":["import { AxiosError } from \"axios\";\nimport {\n  IChangePasswordRequestPayload,\n  ILoginGoogleRequestPayload,\n  ILoginRequestPayload,\n  ILoginResponsePayload,\n  IPasswordResponsePayload,\n  IRefreshRequestPayload,\n  IRefreshResponsePayload,\n  IRegisterMerchantRequestPayload,\n  IRegisterRequestPayload,\n  IRegisterResponsePayload,\n  IResetPasswordRequestPayload,\n} from \"../../interfaces/Auth\";\nimport instance from \"../config/axios\";\nimport { API_PATH } from \"../path\";\n\nconst register = async (\n  payload: IRegisterRequestPayload\n): Promise<IRegisterResponsePayload> => {\n  try {\n    const response = await instance.post<IRegisterResponsePayload>(\n      API_PATH.auth.REGISTER,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRegisterResponsePayload;\n  }\n};\n\nconst registerMerchant = async (\n  payload: IRegisterMerchantRequestPayload\n): Promise<IRegisterResponsePayload> => {\n  try {\n    const response = await instance.post<IRegisterResponsePayload>(\n      API_PATH.auth.REGISTER_MERCHANT,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRegisterResponsePayload;\n  }\n};\n\nconst login = async ({\n  email,\n  password,\n}: ILoginRequestPayload): Promise<ILoginResponsePayload> => {\n  try {\n    const response = await instance.post<ILoginResponsePayload>(\n      API_PATH.auth.LOGIN,\n      {\n        email,\n        password,\n      }\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ILoginResponsePayload;\n  }\n};\n\nconst loginGoogle = async (\n  payload: ILoginGoogleRequestPayload\n): Promise<ILoginResponsePayload> => {\n  try {\n    const response = await instance.post<ILoginResponsePayload>(\n      API_PATH.auth.LOGIN_GOOGLE,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ILoginResponsePayload;\n  }\n};\n\nconst refresh = async (\n  payload: IRefreshRequestPayload\n): Promise<IRefreshResponsePayload> => {\n  try {\n    const response = await instance.post<IRefreshResponsePayload>(\n      API_PATH.auth.REFRESH,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRefreshResponsePayload;\n  }\n};\n\nconst checkEmail = async (email: string) => {\n  try {\n    const response = await instance.post(API_PATH.user.PROFILE, { email });\n\n    if (response.status >= 200 && response.status <= 300) {\n      return response.data;\n    }\n  } catch (e: unknown) {\n    const error = e as AxiosError;\n    return error.response?.data;\n  }\n};\n\nconst resetPassword = async (\n  payload: IResetPasswordRequestPayload\n): Promise<IPasswordResponsePayload> => {\n  try {\n    const response = await instance.post<IPasswordResponsePayload>(\n      API_PATH.auth.PASSWORD,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPasswordResponsePayload;\n  }\n};\n\nconst changePassword = async (\n  payload: IChangePasswordRequestPayload\n): Promise<IPasswordResponsePayload> => {\n  try {\n    const response = await instance.put<IPasswordResponsePayload>(\n      API_PATH.auth.PASSWORD,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPasswordResponsePayload;\n  }\n};\n\nconst authService = {\n  register,\n  registerMerchant,\n  login,\n  loginGoogle,\n  refresh,\n  checkEmail,\n  resetPassword,\n  changePassword,\n};\n\nexport default authService;\n","import React, { useEffect } from \"react\";\n\nconst useTitle = (title = \"BAZR\") => {\n  const titleDom = document.getElementById(\"title\") as HTMLTitleElement;\n\n  useEffect(() => {\n    titleDom.innerHTML = title;\n  }, [title]);\n};\n\nexport default useTitle;\n","import {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Link,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Field, FieldProps, Formik } from \"formik\";\nimport { useState } from \"react\";\nimport { Link as RouterLink, useLocation, useNavigate } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport authService from \"../../api/service/auth\";\nimport Icon from \"../../assets/icons\";\nimport useTitle from \"../../hooks/useTitle\";\nimport useToast from \"../../hooks/useToast\";\nimport { IRegisterRequestPayload } from \"../../interfaces/Auth\";\n\nconst Register = () => {\n  useTitle(\"Register | BAZR\");\n  const { state } = useLocation();\n  const navigate = useNavigate();\n  const { successToast, errorToast } = useToast();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleSubmitRegister = async (formData: {\n    name: string;\n    username: string;\n    email: string;\n    password: string;\n  }) => {\n    setIsLoading(true);\n\n    const payload: IRegisterRequestPayload = {\n      ...formData,\n      isOauth: state ? true : false,\n    };\n\n    const response = await authService\n      .register(payload)\n      .finally(() => setIsLoading(false));\n\n    if (response.is_success) {\n      if (state) {\n        successToast(\"Your account has been created!\");\n        navigate(\"/\");\n      } else {\n        successToast(\"Your account has been created! Please log in.\");\n        navigate(\"/login\");\n      }\n    } else {\n      errorToast(\"Failed to register\", response.message);\n    }\n  };\n\n  const registerValidationSchema = Yup.object().shape({\n    name: Yup.string()\n      .required(\"Required\")\n      .matches(/^[a-zA-Z ]*$/, \"Must not contain any number\"),\n    username: Yup.string()\n      .required(\"Required\")\n      .matches(/^[a-zA-Z0-9]*$/, \"Must not contain any space and symbol\"),\n    email: Yup.string().email(\"Invalid email format\").required(\"Required\"),\n    password: Yup.string()\n      .required(\"Required\")\n      .min(8, \"Password must contain at least 8 characters\")\n      .matches(\n        /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])/,\n        \"Must contain at least One Uppercase, One Lowercase, One Number and one special case Character\"\n      )\n      .matches(/^(\\S+$)/, \"No spaces allowed\"),\n    confirmPassword: Yup.string()\n      .required(\"Required\")\n      .oneOf([Yup.ref(\"password\"), null], \"Password must match\"),\n  });\n\n  return (\n    <>\n      <Box textAlign=\"center\">\n        <Heading>Sign up</Heading>\n        <Text mt={2}>\n          Or{\" \"}\n          <Link as={RouterLink} to=\"/login\" color=\"teal.500\">\n            sign in now!\n          </Link>\n        </Text>\n      </Box>\n\n      <Box textAlign=\"left\" mt={4}>\n        <Formik\n          initialValues={{\n            name: state ? (state.fullname as string) : \"\",\n            username: \"\",\n            email: state ? (state.email as string) : \"\",\n            password: \"\",\n            confirmPassword: \"\",\n          }}\n          validationSchema={registerValidationSchema}\n          onSubmit={(values) => {\n            handleSubmitRegister(values);\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <FormControl\n                mt={4}\n                isInvalid={!!errors.name && touched.name}\n                isDisabled={state ? true : false}\n              >\n                <FormLabel>Name</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"name\"\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                  variant=\"filled\"\n                />\n                <FormErrorMessage>{errors.name}</FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mt={4}\n                isInvalid={!!errors.username && touched.username}\n              >\n                <FormLabel>Username</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  variant=\"filled\"\n                />\n                <FormErrorMessage>{errors.username}</FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mt={4}\n                isInvalid={!!errors.email && touched.email}\n                isDisabled={state ? true : false}\n              >\n                <FormLabel>Email</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email address\"\n                  variant=\"filled\"\n                />\n                <FormErrorMessage>{errors.email}</FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mt={4}\n                isInvalid={!!errors.password && touched.password}\n              >\n                <FormLabel>Password</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  variant=\"filled\"\n                >\n                  {({ field }: FieldProps) => (\n                    <InputGroup size=\"md\">\n                      <Input\n                        pr=\"4.5rem\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter password\"\n                        variant={\"filled\"}\n                        {...field}\n                      />\n                      <InputRightElement marginEnd={2}>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          variant={\"link\"}\n                        >\n                          {showPassword ? (\n                            <Icon.Hide fill={\"darkLighten\"} />\n                          ) : (\n                            <Icon.Show fill={\"darkLighten\"} />\n                          )}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                  )}\n                </Field>\n                <FormErrorMessage>{errors.password}</FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mt={4}\n                isInvalid={!!errors.confirmPassword && touched.confirmPassword}\n              >\n                <FormLabel>Confirm Password</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  variant=\"filled\"\n                >\n                  {({ field }: FieldProps) => (\n                    <InputGroup size=\"md\">\n                      <Input\n                        pr=\"4.5rem\"\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        placeholder=\"Re-enter your password\"\n                        variant={\"filled\"}\n                        {...field}\n                      />\n                      <InputRightElement marginEnd={2}>\n                        <Button\n                          size=\"sm\"\n                          onClick={() =>\n                            setShowConfirmPassword(!showConfirmPassword)\n                          }\n                          variant={\"link\"}\n                        >\n                          {showConfirmPassword ? (\n                            <Icon.Hide fill={\"darkLighten\"} />\n                          ) : (\n                            <Icon.Show fill={\"darkLighten\"} />\n                          )}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                  )}\n                </Field>\n                <FormErrorMessage>{errors.confirmPassword}</FormErrorMessage>\n              </FormControl>\n\n              <Button\n                variant=\"primary\"\n                width=\"full\"\n                mt={10}\n                type=\"submit\"\n                isLoading={isLoading}\n              >\n                Sign up\n              </Button>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </>\n  );\n};\n\nexport default Register;\n"],"names":["register","payload","instance","API_PATH","response","data","registerMerchant","login","email","password","loginGoogle","refresh","checkEmail","status","error","resetPassword","changePassword","authService","title","titleDom","document","getElementById","useEffect","innerHTML","useTitle","state","useLocation","navigate","useNavigate","useToast","successToast","errorToast","useState","isLoading","setIsLoading","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","handleSubmitRegister","formData","isOauth","finally","is_success","message","registerValidationSchema","Yup","shape","name","required","matches","username","min","confirmPassword","oneOf","textAlign","mt","as","RouterLink","to","color","initialValues","fullname","validationSchema","onSubmit","values","handleSubmit","errors","touched","isInvalid","isDisabled","Input","type","placeholder","variant","field","size","pr","marginEnd","onClick","fill","width"],"sourceRoot":""}