{"version":3,"file":"static/js/387.75d9dff4.chunk.js","mappings":"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","sources":["components/Pagination/Pagination.tsx","api/service/refund.ts","hooks/useRefund.ts","pages/Admin/AdminPage.tsx"],"sourcesContent":["import { Button, Flex } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { IPaginationProps } from \"../../interfaces/Pagination\";\n\nconst Pagination = ({ ...props }: IPaginationProps) => {\n  const [pagination, setPagination] = useState<String[]>([]);\n\n  const handleClick = (page: number) => {\n    window.scrollTo(0, 0);\n    props.setPage(page);\n  };\n\n  const handlePagination = (totalPage: number, currentPage: number) => {\n    let element: string[] = [];\n    const actualPage = currentPage + 1;\n\n    if (totalPage <= 10) {\n      element = Array.from(Array(props.data.total_page).keys(), (index) =>\n        String(index + 1)\n      );\n    } else {\n      if (actualPage <= 4) {\n        element = [\"1\", \"2\", \"3\", \"...\", String(totalPage)];\n      } else if (actualPage < 6) {\n        element = [\n          \"1\",\n          \"...\",\n          String(actualPage - 2),\n          String(actualPage - 1),\n          String(actualPage),\n          \"...\",\n          String(totalPage),\n        ];\n      } else if (actualPage < totalPage && actualPage > 4) {\n        element = [\n          \"1\",\n          \"...\",\n          String(actualPage - 3),\n          String(actualPage - 2),\n          String(actualPage - 1),\n          \"...\",\n          String(totalPage),\n        ];\n      } else if (actualPage > totalPage - 4) {\n        element = [\n          \"1\",\n          \"...\",\n          String(totalPage - 2),\n          String(totalPage - 1),\n          String(totalPage),\n        ];\n      } else {\n        element = [\n          \"1\",\n          \"...\",\n          String(actualPage - 1),\n          String(actualPage),\n          String(actualPage + 1),\n          \"...\",\n          String(totalPage),\n        ];\n      }\n    }\n\n    setPagination(element);\n  };\n\n  useEffect(() => {\n    handlePagination(props.data.total_page, props.data.current_page);\n  }, [props.data]);\n\n  return (\n    <Flex justifyContent={\"center\"} gap={5} py={8}>\n      <Button\n        variant={\"unstyled\"}\n        borderRadius={\"none\"}\n        fontWeight={\"normal\"}\n        size={{\n          base: \"md\",\n          sm: \"lg\",\n          md: \"lg\",\n          lg: \"lg\",\n          xl: \"lg\",\n        }}\n        onClick={() => {\n          if (props.data.current_page - 1 > 0) {\n            handleClick(props.data.current_page - 1);\n          }\n        }}\n      >\n        Prev\n      </Button>\n      {pagination.map((item, index) => (\n        <Button\n          key={index}\n          variant={\"unstyled\"}\n          borderRadius={\"none\"}\n          fontWeight={\n            props.data.current_page === Number(item) ? \"bold\" : \"normal\"\n          }\n          borderBottom={props.data.current_page === Number(item) ? \"1px\" : \"\"}\n          borderColor={\"primary\"}\n          size={{\n            md: \"lg\",\n            lg: \"lg\",\n            xl: \"lg\",\n          }}\n          display={{\n            base: \"none\",\n            sm: \"none\",\n            md: \"inline\",\n            lg: \"inline\",\n            xl: \"inline\",\n          }}\n          onClick={() => {\n            if (item !== \"...\") {\n              handleClick(Number(item));\n            }\n          }}\n        >\n          {item}\n        </Button>\n      ))}\n      <Button\n        variant={\"unstyled\"}\n        borderRadius={\"none\"}\n        fontWeight={\"normal\"}\n        size={{\n          base: \"md\",\n          sm: \"lg\",\n          md: \"lg\",\n          lg: \"lg\",\n          xl: \"lg\",\n        }}\n        onClick={() => {\n          if (props.data.current_page + 1 <= props.data.total_page) {\n            handleClick(props.data.current_page + 1);\n          }\n        }}\n      >\n        Next\n      </Button>\n    </Flex>\n  );\n};\n\nexport default Pagination;\n","import { IFilterPayload } from \"../../interfaces/Filter\";\nimport {\n  ICreateRefundPayload,\n  IRefundConfirmPayload,\n  IRefundDetailPayload,\n  IRefundPaginationPayload,\n} from \"../../interfaces/Refund\";\nimport instance from \"../config/axios\";\nimport { API_PATH } from \"../path\";\n\nconst createRefund = async (\n  payload: ICreateRefundPayload\n): Promise<IRefundDetailPayload> => {\n  try {\n    const response = await instance.post<IRefundDetailPayload>(\n      API_PATH.refund.REFUNDS,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRefundDetailPayload;\n  }\n};\n\nconst getBuyerRefund = async (\n  filter?: IFilterPayload\n): Promise<IRefundPaginationPayload> => {\n  try {\n    const response = await instance.get<IRefundPaginationPayload>(\n      API_PATH.refund.BUYER_REFUNDS,\n      {\n        params: filter,\n      }\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRefundPaginationPayload;\n  }\n};\n\nconst getAdminRefund = async (\n  filter?: IFilterPayload\n): Promise<IRefundPaginationPayload> => {\n  try {\n    const response = await instance.get<IRefundPaginationPayload>(\n      API_PATH.refund.REFUNDS,\n      {\n        params: filter,\n      }\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRefundPaginationPayload;\n  }\n};\n\nconst approveRefundAdmin = async (\n  refundId: number,\n  payload: IRefundConfirmPayload\n): Promise<IRefundDetailPayload> => {\n  try {\n    const response = await instance.patch<IRefundDetailPayload>(\n      API_PATH.refund.REFUND_DETAIL(refundId),\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRefundDetailPayload;\n  }\n};\n\nconst refundService = {\n  createRefund,\n  getBuyerRefund,\n  getAdminRefund,\n  approveRefundAdmin,\n};\n\nexport default refundService;\n","import refundService from \"../api/service/refund\";\nimport { IFilterPayload } from \"../interfaces/Filter\";\nimport {\n  ICreateRefundPayload,\n  IRefundConfirmPayload,\n} from \"../interfaces/Refund\";\n\nconst useRefund = () => {\n  const createRefund = async (payload: ICreateRefundPayload) => {\n    const response = await refundService.createRefund(payload);\n\n    return response;\n  };\n\n  const fetchBuyerRefund = async (filter?: IFilterPayload) => {\n    const response = await refundService.getBuyerRefund(filter);\n\n    return response;\n  };\n\n  const fetchAdminRefund = async (filter?: IFilterPayload) => {\n    const response = await refundService.getAdminRefund(filter);\n\n    return response;\n  };\n\n  const approveRefundAdmin = async (\n    refundId: number,\n    payload: IRefundConfirmPayload\n  ) => {\n    const response = await refundService.approveRefundAdmin(refundId, payload);\n\n    return response;\n  };\n\n  return {\n    createRefund,\n    fetchBuyerRefund,\n    fetchAdminRefund,\n    approveRefundAdmin,\n  };\n};\n\nexport default useRefund;\n","import {\n  Flex,\n  TableContainer,\n  Table,\n  Thead,\n  Tr,\n  Th,\n  Td,\n  Tbody,\n  IconButton,\n  Text,\n} from \"@chakra-ui/react\";\nimport useRefund from \"../../hooks/useRefund\";\nimport { IRefund } from \"../../interfaces/Refund\";\nimport { formatCurrency } from \"../../util/util\";\nimport { useState, useEffect } from \"react\";\nimport { BsFillCheckCircleFill } from \"react-icons/bs\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport useToast from \"../../hooks/useToast\";\n\nfunction AdminPage() {\n  const [refundList, setRefundList] = useState<IRefund[]>([]);\n  const { fetchAdminRefund, approveRefundAdmin } = useRefund();\n  const [page, setPage] = useState(0);\n  const [totalPage, setTotalPage] = useState(0);\n  const { successToast, errorToast } = useToast();\n\n  const updateRefundList = async () => {\n    const response = await fetchAdminRefund({ page: page });\n\n    if (!response.is_success) {\n      errorToast(response.message);\n      return;\n    }\n\n    setRefundList(response.data.data);\n    setTotalPage(response.data.total_page);\n  };\n\n  const handleApproveRefund = async (ref: number) => {\n    const response = await approveRefundAdmin(ref, { status: \"refunded\" });\n\n    if (!response.is_success) {\n      errorToast(response.message);\n      return;\n    }\n    successToast(\"Refund processed\");\n  };\n\n  useEffect(() => {\n    updateRefundList();\n  }, [page]);\n\n  return (\n    <Flex\n      maxHeight=\"100vh\"\n      maxWidth=\"100vw\"\n      direction={\"column\"}\n      justifyContent={\"center\"}\n      alignItems={\"center\"}\n      bgColor={\"whiteAlpha.700\"}\n      p={3}\n    >\n      <Text fontSize={\"5xl\"} fontWeight=\"bold\">\n        Manage System Refund\n      </Text>\n      <TableContainer maxHeight=\"80vh\" width=\"80%\" overflowY={\"scroll\"}>\n        <Table variant=\"striped\">\n          <Thead>\n            <Tr>\n              <Th textAlign={\"center\"}>Order ID</Th>\n              <Th textAlign={\"center\"}>Seller</Th>\n              <Th textAlign={\"center\"}>Buyer</Th>\n              <Th textAlign={\"center\"}>Amount</Th>\n              <Th textAlign={\"center\"}>Action</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {refundList.map((ref) => {\n              return (\n                <Tr>\n                  <Td textAlign={\"center\"}>{ref.order_id}</Td>\n                  <Td textAlign={\"center\"}>{ref.seller_name}</Td>\n                  <Td textAlign={\"center\"}>{ref.buyer_name}</Td>\n                  <Td textAlign={\"center\"}>\n                    {\"Rp\" + formatCurrency(ref.amount)}\n                  </Td>\n                  <Td textAlign={\"center\"}>\n                    <IconButton\n                      mx={1}\n                      aria-label=\"Refund\"\n                      bgColor={\"green.300\"}\n                      icon={<BsFillCheckCircleFill />}\n                      onClick={() => handleApproveRefund(ref.id)}\n                    />\n                  </Td>\n                </Tr>\n              );\n            })}\n          </Tbody>\n        </Table>\n      </TableContainer>\n      <Pagination\n        data={{ total_page: totalPage, current_page: page }}\n        setPage={setPage}\n      />\n    </Flex>\n  );\n}\n\nexport default AdminPage;\n"],"names":["props","useState","pagination","setPagination","handleClick","page","window","scrollTo","setPage","useEffect","totalPage","currentPage","element","actualPage","Array","from","data","total_page","keys","index","String","handlePagination","current_page","justifyContent","gap","py","variant","borderRadius","fontWeight","size","base","sm","md","lg","xl","onClick","map","item","Number","borderBottom","borderColor","display","createRefund","payload","instance","API_PATH","response","getBuyerRefund","filter","params","getAdminRefund","approveRefundAdmin","refundId","refundService","fetchBuyerRefund","fetchAdminRefund","refundList","setRefundList","useRefund","setTotalPage","useToast","successToast","errorToast","updateRefundList","is_success","message","handleApproveRefund","ref","status","maxHeight","maxWidth","direction","alignItems","bgColor","p","fontSize","width","overflowY","Tr","Th","textAlign","Td","order_id","seller_name","buyer_name","formatCurrency","amount","mx","icon","id"],"sourceRoot":""}