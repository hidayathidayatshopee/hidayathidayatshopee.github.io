{"version":3,"file":"static/js/6925.d02f84c4.chunk.js","mappings":"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","sources":["api/service/auth.ts","pages/Auth/ResetPassword.tsx"],"sourcesContent":["import { AxiosError } from \"axios\";\nimport {\n  IChangePasswordRequestPayload,\n  ILoginGoogleRequestPayload,\n  ILoginRequestPayload,\n  ILoginResponsePayload,\n  IPasswordResponsePayload,\n  IRefreshRequestPayload,\n  IRefreshResponsePayload,\n  IRegisterMerchantRequestPayload,\n  IRegisterRequestPayload,\n  IRegisterResponsePayload,\n  IResetPasswordRequestPayload,\n} from \"../../interfaces/Auth\";\nimport instance from \"../config/axios\";\nimport { API_PATH } from \"../path\";\n\nconst register = async (\n  payload: IRegisterRequestPayload\n): Promise<IRegisterResponsePayload> => {\n  try {\n    const response = await instance.post<IRegisterResponsePayload>(\n      API_PATH.auth.REGISTER,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRegisterResponsePayload;\n  }\n};\n\nconst registerMerchant = async (\n  payload: IRegisterMerchantRequestPayload\n): Promise<IRegisterResponsePayload> => {\n  try {\n    const response = await instance.post<IRegisterResponsePayload>(\n      API_PATH.auth.REGISTER_MERCHANT,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRegisterResponsePayload;\n  }\n};\n\nconst login = async ({\n  email,\n  password,\n}: ILoginRequestPayload): Promise<ILoginResponsePayload> => {\n  try {\n    const response = await instance.post<ILoginResponsePayload>(\n      API_PATH.auth.LOGIN,\n      {\n        email,\n        password,\n      }\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ILoginResponsePayload;\n  }\n};\n\nconst loginGoogle = async (\n  payload: ILoginGoogleRequestPayload\n): Promise<ILoginResponsePayload> => {\n  try {\n    const response = await instance.post<ILoginResponsePayload>(\n      API_PATH.auth.LOGIN_GOOGLE,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ILoginResponsePayload;\n  }\n};\n\nconst refresh = async (\n  payload: IRefreshRequestPayload\n): Promise<IRefreshResponsePayload> => {\n  try {\n    const response = await instance.post<IRefreshResponsePayload>(\n      API_PATH.auth.REFRESH,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRefreshResponsePayload;\n  }\n};\n\nconst checkEmail = async (email: string) => {\n  try {\n    const response = await instance.post(API_PATH.user.PROFILE, { email });\n\n    if (response.status >= 200 && response.status <= 300) {\n      return response.data;\n    }\n  } catch (e: unknown) {\n    const error = e as AxiosError;\n    return error.response?.data;\n  }\n};\n\nconst resetPassword = async (\n  payload: IResetPasswordRequestPayload\n): Promise<IPasswordResponsePayload> => {\n  try {\n    const response = await instance.post<IPasswordResponsePayload>(\n      API_PATH.auth.PASSWORD,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPasswordResponsePayload;\n  }\n};\n\nconst changePassword = async (\n  payload: IChangePasswordRequestPayload\n): Promise<IPasswordResponsePayload> => {\n  try {\n    const response = await instance.put<IPasswordResponsePayload>(\n      API_PATH.auth.PASSWORD,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPasswordResponsePayload;\n  }\n};\n\nconst authService = {\n  register,\n  registerMerchant,\n  login,\n  loginGoogle,\n  refresh,\n  checkEmail,\n  resetPassword,\n  changePassword,\n};\n\nexport default authService;\n","import {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Field, FieldProps, Formik } from \"formik\";\nimport { useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport authService from \"../../api/service/auth\";\nimport Icon from \"../../assets/icons\";\nimport useToast from \"../../hooks/useToast\";\nimport { IChangePasswordRequestPayload } from \"../../interfaces/Auth\";\n\nfunction ResetRequest() {\n  const navigate = useNavigate();\n  const [search] = useSearchParams();\n  const { successToast, errorToast } = useToast();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleSubmitResetPassword = async (formValues: {\n    password: string;\n  }) => {\n    setIsLoading(true);\n    const payload: IChangePasswordRequestPayload = {\n      password: formValues.password,\n      token: search.get(\"code\")!,\n    };\n\n    const response = await authService\n      .changePassword(payload)\n      .finally(() => setIsLoading(false));\n\n    if (response.is_success) {\n      successToast(\"Your password has been changed! Please log in again.\");\n      navigate(\"/login\");\n    } else {\n      errorToast(\n        \"Failed to change your password. Please try again\",\n        response.message\n      );\n    }\n  };\n\n  const validationSchema = Yup.object().shape({\n    password: Yup.string()\n      .required(\"Required\")\n      .min(8, \"Password must contain at least 8 characters\")\n      .matches(\n        /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])/,\n        \"Must contain at least One Uppercase, One Lowercase, One Number and one special case Character\"\n      )\n      .matches(/^(\\S+$)/, \"No spaces allowed\"),\n    confirmPassword: Yup.string()\n      .required(\"Required\")\n      .oneOf([Yup.ref(\"password\"), null], \"Password must match\"),\n  });\n\n  return (\n    <>\n      <Box textAlign=\"center\">\n        <Heading>Reset your password</Heading>\n        <Text mt={2}>Set new password</Text>\n      </Box>\n\n      <Box textAlign=\"left\" my={4}>\n        <Formik\n          initialValues={{\n            password: \"\",\n            confirmPassword: \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(values) => {\n            handleSubmitResetPassword(values);\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <FormControl\n                mt={4}\n                isInvalid={!!errors.password && touched.password}\n              >\n                <FormLabel>Password</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  variant=\"filled\"\n                >\n                  {({ field }: FieldProps) => (\n                    <InputGroup size=\"md\">\n                      <Input\n                        pr=\"4.5rem\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter password\"\n                        variant={\"filled\"}\n                        {...field}\n                      />\n                      <InputRightElement marginEnd={2}>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          variant={\"link\"}\n                        >\n                          {showPassword ? (\n                            <Icon.Hide fill={\"darkLighten\"} />\n                          ) : (\n                            <Icon.Show fill={\"darkLighten\"} />\n                          )}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                  )}\n                </Field>\n                <FormErrorMessage>{errors.password}</FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mt={4}\n                isInvalid={!!errors.confirmPassword && touched.confirmPassword}\n              >\n                <FormLabel>Confirm Password</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  placeholder=\"Re-enter your password\"\n                  variant=\"filled\"\n                >\n                  {({ field }: FieldProps) => (\n                    <InputGroup size=\"md\">\n                      <Input\n                        pr=\"4.5rem\"\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        placeholder=\"Re-enter your password\"\n                        variant={\"filled\"}\n                        {...field}\n                      />\n                      <InputRightElement marginEnd={2}>\n                        <Button\n                          size=\"sm\"\n                          onClick={() =>\n                            setShowConfirmPassword(!showConfirmPassword)\n                          }\n                          variant={\"link\"}\n                        >\n                          {showConfirmPassword ? (\n                            <Icon.Hide fill={\"darkLighten\"} />\n                          ) : (\n                            <Icon.Show fill={\"darkLighten\"} />\n                          )}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                  )}\n                </Field>\n                <FormErrorMessage>{errors.confirmPassword}</FormErrorMessage>\n              </FormControl>\n\n              <Button\n                variant=\"primary\"\n                width=\"full\"\n                my={5}\n                type=\"submit\"\n                isLoading={isLoading}\n              >\n                Change Password\n              </Button>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </>\n  );\n}\n\nexport default ResetRequest;\n"],"names":["register","payload","instance","API_PATH","response","data","registerMerchant","login","email","password","loginGoogle","refresh","checkEmail","status","error","resetPassword","changePassword","authService","navigate","useNavigate","useSearchParams","search","useToast","successToast","errorToast","useState","isLoading","setIsLoading","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","handleSubmitResetPassword","formValues","token","get","finally","is_success","message","validationSchema","Yup","shape","required","min","matches","confirmPassword","oneOf","textAlign","mt","my","initialValues","onSubmit","values","handleSubmit","errors","touched","isInvalid","as","Input","name","type","placeholder","variant","field","size","pr","marginEnd","onClick","fill","width"],"sourceRoot":""}