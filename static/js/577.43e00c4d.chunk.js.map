{"version":3,"file":"static/js/577.43e00c4d.chunk.js","mappings":"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","sources":["api/service/auth.ts","hooks/useTitle.ts","pages/Auth/Login.tsx"],"sourcesContent":["import { AxiosError } from \"axios\";\nimport {\n  IChangePasswordRequestPayload,\n  ILoginGoogleRequestPayload,\n  ILoginRequestPayload,\n  ILoginResponsePayload,\n  IPasswordResponsePayload,\n  IRefreshRequestPayload,\n  IRefreshResponsePayload,\n  IRegisterMerchantRequestPayload,\n  IRegisterRequestPayload,\n  IRegisterResponsePayload,\n  IResetPasswordRequestPayload,\n} from \"../../interfaces/Auth\";\nimport instance from \"../config/axios\";\nimport { API_PATH } from \"../path\";\n\nconst register = async (\n  payload: IRegisterRequestPayload\n): Promise<IRegisterResponsePayload> => {\n  try {\n    const response = await instance.post<IRegisterResponsePayload>(\n      API_PATH.auth.REGISTER,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRegisterResponsePayload;\n  }\n};\n\nconst registerMerchant = async (\n  payload: IRegisterMerchantRequestPayload\n): Promise<IRegisterResponsePayload> => {\n  try {\n    const response = await instance.post<IRegisterResponsePayload>(\n      API_PATH.auth.REGISTER_MERCHANT,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRegisterResponsePayload;\n  }\n};\n\nconst login = async ({\n  email,\n  password,\n}: ILoginRequestPayload): Promise<ILoginResponsePayload> => {\n  try {\n    const response = await instance.post<ILoginResponsePayload>(\n      API_PATH.auth.LOGIN,\n      {\n        email,\n        password,\n      }\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ILoginResponsePayload;\n  }\n};\n\nconst loginGoogle = async (\n  payload: ILoginGoogleRequestPayload\n): Promise<ILoginResponsePayload> => {\n  try {\n    const response = await instance.post<ILoginResponsePayload>(\n      API_PATH.auth.LOGIN_GOOGLE,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ILoginResponsePayload;\n  }\n};\n\nconst refresh = async (\n  payload: IRefreshRequestPayload\n): Promise<IRefreshResponsePayload> => {\n  try {\n    const response = await instance.post<IRefreshResponsePayload>(\n      API_PATH.auth.REFRESH,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRefreshResponsePayload;\n  }\n};\n\nconst checkEmail = async (email: string) => {\n  try {\n    const response = await instance.post(API_PATH.user.PROFILE, { email });\n\n    if (response.status >= 200 && response.status <= 300) {\n      return response.data;\n    }\n  } catch (e: unknown) {\n    const error = e as AxiosError;\n    return error.response?.data;\n  }\n};\n\nconst resetPassword = async (\n  payload: IResetPasswordRequestPayload\n): Promise<IPasswordResponsePayload> => {\n  try {\n    const response = await instance.post<IPasswordResponsePayload>(\n      API_PATH.auth.PASSWORD,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPasswordResponsePayload;\n  }\n};\n\nconst changePassword = async (\n  payload: IChangePasswordRequestPayload\n): Promise<IPasswordResponsePayload> => {\n  try {\n    const response = await instance.put<IPasswordResponsePayload>(\n      API_PATH.auth.PASSWORD,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPasswordResponsePayload;\n  }\n};\n\nconst authService = {\n  register,\n  registerMerchant,\n  login,\n  loginGoogle,\n  refresh,\n  checkEmail,\n  resetPassword,\n  changePassword,\n};\n\nexport default authService;\n","import React, { useEffect } from \"react\";\n\nconst useTitle = (title = \"BAZR\") => {\n  const titleDom = document.getElementById(\"title\") as HTMLTitleElement;\n\n  useEffect(() => {\n    titleDom.innerHTML = title;\n  }, [title]);\n};\n\nexport default useTitle;\n","import {\n  Box,\n  Button,\n  Center,\n  Divider,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  HStack,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Link,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport { Field, FieldProps, Formik } from \"formik\";\nimport { useState } from \"react\";\nimport { Link as RouterLink, useLocation, useNavigate } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport authService from \"../../api/service/auth\";\nimport Icon from \"../../assets/icons\";\nimport useTitle from \"../../hooks/useTitle\";\nimport useToast from \"../../hooks/useToast\";\nimport {\n  ILoginGoogleRequestPayload,\n  ILoginRequestPayload,\n} from \"../../interfaces/Auth\";\n\nconst Login = () => {\n  useTitle(\"Login | BAZR\");\n  const { state } = useLocation();\n  const navigate = useNavigate();\n  const { successToast, errorToast } = useToast();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleSubmitLogin = async (payload: ILoginRequestPayload) => {\n    setIsLoading(true);\n    const response = await authService\n      .login(payload)\n      .finally(() => setIsLoading(false));\n\n    if (response.is_success) {\n      successToast(\"Welcome back!\");\n      navigate(state ?? \"/\");\n    } else {\n      errorToast(\"Failed to login\", response.message);\n    }\n  };\n\n  const handleSubmitGoogleLogin = async (\n    payload: ILoginGoogleRequestPayload\n  ) => {\n    const response = await authService.loginGoogle(payload);\n\n    if (response.is_success) {\n      if (response.data.is_registered) {\n        successToast(\"Welcome back!\");\n        navigate(state ?? \"/\");\n      } else {\n        navigate(\"/register\", { state: response.data });\n      }\n    } else {\n      errorToast(\"Failed to login\", response.message);\n    }\n  };\n\n  const loginValidationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n    password: Yup.string().required(\"Required\"),\n  });\n\n  return (\n    <>\n      <Box textAlign=\"center\">\n        <Heading>Sign in to your account</Heading>\n        <Text mt={2}>\n          Or{\" \"}\n          <Link as={RouterLink} to=\"/register\" color=\"teal.500\">\n            sign up now!\n          </Link>\n        </Text>\n      </Box>\n\n      <Box textAlign=\"left\" my={4}>\n        <Formik\n          initialValues={{\n            email: \"\",\n            password: \"\",\n          }}\n          validationSchema={loginValidationSchema}\n          onSubmit={(values) => {\n            handleSubmitLogin(values);\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <FormControl isInvalid={!!errors.email && touched.email}>\n                <FormLabel>Email</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email address\"\n                  variant=\"filled\"\n                />\n                <FormErrorMessage>{errors.email}</FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mt={4}\n                isInvalid={!!errors.password && touched.password}\n              >\n                <FormLabel>Password</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  variant=\"filled\"\n                >\n                  {({ field }: FieldProps) => (\n                    <InputGroup size=\"md\">\n                      <Input\n                        pr=\"4.5rem\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter password\"\n                        variant={\"filled\"}\n                        {...field}\n                      />\n                      <InputRightElement marginEnd={2}>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          variant={\"link\"}\n                        >\n                          {showPassword ? (\n                            <Icon.Hide fill={\"darkLighten\"} />\n                          ) : (\n                            <Icon.Show fill={\"darkLighten\"} />\n                          )}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                  )}\n                </Field>\n                <FormErrorMessage>{errors.password}</FormErrorMessage>\n              </FormControl>\n\n              <Stack isInline justifyContent=\"end\" mt={4}>\n                <Box>\n                  <Link color=\"teal.500\" href=\"/reset-request\">\n                    Forgot your password?\n                  </Link>\n                </Box>\n              </Stack>\n\n              <Button\n                variant=\"primary\"\n                width=\"full\"\n                mt={10}\n                type=\"submit\"\n                isLoading={isLoading}\n              >\n                Sign in\n              </Button>\n            </form>\n          )}\n        </Formik>\n      </Box>\n\n      <Box textAlign=\"center\">\n        <HStack>\n          <Divider\n            my={8}\n            borderColor=\"gray.300\"\n            background=\"gray.300\"\n            borderWidth=\"1px\"\n          />\n          <Text px={5}>or</Text>\n          <Divider\n            my={8}\n            borderColor=\"gray.300\"\n            background=\"gray.300\"\n            borderWidth=\"1px\"\n          />\n        </HStack>\n        <Center my={3}>\n          <GoogleLogin\n            onSuccess={(response) => {\n              handleSubmitGoogleLogin({\n                token: (response as any).credential,\n              });\n            }}\n            type=\"standard\"\n            shape=\"circle\"\n            theme=\"outline\"\n            text=\"signin_with\"\n          />\n        </Center>\n      </Box>\n    </>\n  );\n};\n\nexport default Login;\n"],"names":["register","payload","instance","API_PATH","response","data","registerMerchant","login","email","password","loginGoogle","refresh","checkEmail","status","error","resetPassword","changePassword","authService","title","titleDom","document","getElementById","useEffect","innerHTML","useTitle","state","useLocation","navigate","useNavigate","useToast","successToast","errorToast","useState","isLoading","setIsLoading","showPassword","setShowPassword","handleSubmitLogin","finally","is_success","message","handleSubmitGoogleLogin","is_registered","loginValidationSchema","Yup","shape","required","textAlign","mt","as","RouterLink","to","color","my","initialValues","validationSchema","onSubmit","values","handleSubmit","errors","touched","isInvalid","Input","name","type","placeholder","variant","field","size","pr","marginEnd","onClick","fill","isInline","justifyContent","href","width","borderColor","background","borderWidth","px","onSuccess","token","credential","theme","text"],"sourceRoot":""}