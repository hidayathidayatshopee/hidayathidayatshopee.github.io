{"version":3,"file":"static/js/584.3205efc9.chunk.js","mappings":"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","sources":["components/Modal/PaymentPinModal.tsx","api/service/wallet.ts","hooks/useWallet.ts","components/Modal/WalletActivationModal.tsx","components/Modal/WalletPasswordModal.tsx","pages/User/UserWallet.tsx"],"sourcesContent":["import {\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  ModalHeader,\n  Image,\n  ModalCloseButton,\n  ModalBody,\n  Center,\n  VStack,\n  Text,\n  HStack,\n  PinInput,\n  PinInputField,\n  ModalFooter,\n  Button,\n} from \"@chakra-ui/react\";\nimport { IPaymentPinProps } from \"../../interfaces/Components\";\n\nconst PaymentPinModal = ({ ...props }: IPaymentPinProps) => {\n  return (\n    <Modal\n      onClose={props.onClose}\n      size=\"4xl\"\n      isOpen={props.isOpen}\n      closeOnOverlayClick={false}\n    >\n      <ModalOverlay backdropFilter=\"blur(10px)\" />\n      <ModalContent>\n        <ModalHeader>\n          <Image src=\"/logo.svg\" width={\"8em\"} />\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Center height={\"60vh\"}>\n            <VStack\n              justifyContent={\"space-between\"}\n              alignItems={\"center\"}\n              gap={10}\n              width=\"100%\"\n            >\n              <Text\n                fontSize={{\n                  base: \"1em\",\n                  sm: \"1em\",\n                  md: \"1em\",\n                  lg: \"2em\",\n                  xl: \"2em\",\n                }}\n                as=\"b\"\n              >\n                {props.title ? props.title : \"Enter Your 6 Digit Pin\"}\n              </Text>\n              <HStack\n                justifyContent={\"center\"}\n                alignItems={\"center\"}\n                width=\"100%\"\n              >\n                <PinInput\n                  placeholder=\"_\"\n                  onChange={(value) => {\n                    props.setPinInput(value);\n                    props.handlePinChange(value);\n                  }}\n                  value={props.pinInput}\n                  mask\n                >\n                  {[...Array(6)].map((_, i) => {\n                    return (\n                      <PinInputField\n                        boxSize={{\n                          base: \"2em\",\n                          sm: \"2em\",\n                          md: \"3em\",\n                          lg: \"4em\",\n                          xl: \"4em\",\n                        }}\n                        fontSize={\"2em\"}\n                        backgroundColor={\"gray.100\"}\n                        borderColor=\"black\"\n                        tabIndex={i + 1}\n                      />\n                    );\n                  })}\n                </PinInput>\n              </HStack>\n            </VStack>\n          </Center>\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={props.onClose}>Close</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default PaymentPinModal;\n","import {\n  IPinPasswordRequestPayload,\n  IPinRequestPayload,\n  IPinResponsePayload,\n  IPinUpdateRequestPayload,\n} from \"../../interfaces/Auth\";\nimport {\n  IPaymentWalletRequestPayload,\n  IPaymentWalletResponsePayload,\n} from \"../../interfaces/Wallet\";\nimport instance from \"../config/axios\";\nimport { API_PATH } from \"../path\";\n\nconst verifyPin = async (\n  payload: IPinRequestPayload\n): Promise<IPinResponsePayload> => {\n  try {\n    const response = await instance.post<IPinResponsePayload>(\n      API_PATH.wallet.VERIFY_PIN,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPinResponsePayload;\n  }\n};\n\nconst verifyPasswordWallet = async (\n  payload: IPinPasswordRequestPayload\n): Promise<IPinResponsePayload> => {\n  try {\n    const response = await instance.post<IPinResponsePayload>(\n      API_PATH.wallet.VERIFY_PASSWORD_PIN,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPinResponsePayload;\n  }\n};\n\nconst paymentWallet = async (\n  payload: IPaymentWalletRequestPayload\n): Promise<IPaymentWalletResponsePayload> => {\n  try {\n    const response = await instance.post<IPaymentWalletResponsePayload>(\n      API_PATH.wallet.PAYMENT_WALLET,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPaymentWalletResponsePayload;\n  }\n};\n\nconst updatePin = async (\n  payload: IPinUpdateRequestPayload\n): Promise<IPinResponsePayload> => {\n  try {\n    const response = await instance.put<IPinResponsePayload>(\n      API_PATH.wallet.UPDATE_PIN,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPinResponsePayload;\n  }\n};\n\nconst activateWallet = async (\n  payload: IPinRequestPayload\n): Promise<IPaymentWalletResponsePayload> => {\n  try {\n    const response = await instance.post<IPaymentWalletResponsePayload>(\n      API_PATH.wallet.ACTIVATE_WALLET,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPaymentWalletResponsePayload;\n  }\n};\n\nconst walletService = {\n  verifyPin,\n  paymentWallet,\n  updatePin,\n  activateWallet,\n  verifyPasswordWallet,\n};\n\nexport default walletService;\n","import { useToast } from \"@chakra-ui/react\";\nimport walletService from \"../api/service/wallet\";\nimport {\n  IPinPasswordRequestPayload,\n  IPinRequestPayload,\n  IPinUpdateRequestPayload,\n} from \"../interfaces/Auth\";\nimport { IPaymentWalletRequestPayload } from \"../interfaces/Wallet\";\n\nconst useWallet = () => {\n  const toast = useToast();\n\n  const verifyPin = async (payload: IPinRequestPayload) => {\n    const response = await walletService.verifyPin(payload);\n\n    return response;\n  };\n\n  const verifyPasswordPin = async (payload: IPinPasswordRequestPayload) => {\n    const response = await walletService.verifyPasswordWallet(payload);\n\n    return response;\n  };\n\n  const updatePin = async (payload: IPinUpdateRequestPayload) => {\n    const response = await walletService.updatePin(payload);\n\n    return response;\n  };\n\n  const paymentWallet = async (payload: IPaymentWalletRequestPayload) => {\n    const response = await walletService.paymentWallet(payload);\n\n    return response;\n  };\n\n  const createPayment = async (\n    paymentPayload: IPaymentWalletRequestPayload\n  ) => {\n    const response = await paymentWallet(paymentPayload);\n\n    if (response.is_success) {\n      toast({\n        title: \"Payment successful\",\n        status: \"success\",\n        duration: 3000,\n        position: \"top\",\n        isClosable: true,\n      });\n    } else {\n      toast({\n        title: \"Failed to create payment\",\n        description: response.message,\n        status: \"error\",\n        duration: 3000,\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n\n    return response.is_success;\n  };\n\n  const activateWallet = async (payload: IPinRequestPayload) => {\n    const response = await walletService.activateWallet(payload);\n\n    return response;\n  };\n\n  return {\n    verifyPin,\n    paymentWallet,\n    createPayment,\n    updatePin,\n    activateWallet,\n    verifyPasswordPin,\n  };\n};\n\nexport default useWallet;\n","import {\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  ModalHeader,\n  Image,\n  ModalBody,\n  Center,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  ModalFooter,\n  Button,\n} from \"@chakra-ui/react\";\nimport { IWalletActivationModalProps } from \"../../interfaces/Components\";\n\nconst WalletActivationModal = ({ ...props }: IWalletActivationModalProps) => {\n  const nextModal = async () => {\n    props.onClose();\n    props.nextModal();\n  };\n\n  return (\n    <Modal\n      onClose={props.onClose}\n      size=\"4xl\"\n      isOpen={props.isOpen}\n      closeOnOverlayClick={false}\n    >\n      <ModalOverlay backdropFilter=\"blur(10px)\" />\n      <ModalContent>\n        <ModalHeader>\n          <Image src=\"/logo.svg\" width={\"8em\"} />\n        </ModalHeader>\n        <ModalBody>\n          <Center height={\"60vh\"}>\n            <Alert\n              status=\"warning\"\n              variant=\"subtle\"\n              flexDirection=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              textAlign=\"center\"\n              height=\"100%\"\n            >\n              <AlertIcon boxSize=\"40px\" mr={0} />\n              <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n                Wallet Has Not Been Activated!\n              </AlertTitle>\n              <AlertDescription maxWidth=\"sm\">\n                Please set up a 6 digit pin for your wallet, click \"Next\" to\n                continue.\n              </AlertDescription>\n            </Alert>\n          </Center>\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={nextModal}>Next</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default WalletActivationModal;\n","import {\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  ModalHeader,\n  Image,\n  ModalCloseButton,\n  ModalBody,\n  Center,\n  VStack,\n  Text,\n  HStack,\n  Input,\n  ModalFooter,\n  Button,\n  InputGroup,\n} from \"@chakra-ui/react\";\nimport { IWalletPasswordModalProps } from \"../../interfaces/Components\";\n\nconst WalletPasswordModal = ({ ...props }: IWalletPasswordModalProps) => {\n  return (\n    <Modal\n      onClose={props.onClose}\n      size=\"4xl\"\n      isOpen={props.isOpen}\n      closeOnOverlayClick={false}\n    >\n      <ModalOverlay backdropFilter=\"blur(10px)\" />\n      <ModalContent>\n        <ModalHeader>\n          <Image src=\"/logo.svg\" width={\"8em\"} />\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Center height={\"60vh\"}>\n            <VStack\n              justifyContent={\"space-between\"}\n              alignItems={\"center\"}\n              gap={10}\n              width=\"100%\"\n            >\n              <Text\n                fontSize={{\n                  base: \"1em\",\n                  sm: \"1em\",\n                  md: \"1em\",\n                  lg: \"2em\",\n                  xl: \"2em\",\n                }}\n                as=\"b\"\n              >\n                Password Verification\n              </Text>\n              <HStack\n                justifyContent={\"center\"}\n                alignItems={\"center\"}\n                width=\"100%\"\n              >\n                <InputGroup size=\"lg\" width={\"70%\"}>\n                  <Input\n                    pr=\"4.5rem\"\n                    type={\"password\"}\n                    placeholder=\"Enter password\"\n                    fontSize={\"2xl\"}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                      props.setPasswordInput(event.currentTarget.value);\n                    }}\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") {\n                        props.verifyPasswordKb(e);\n                      }\n                    }}\n                  />\n                </InputGroup>\n              </HStack>\n            </VStack>\n          </Center>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            variant=\"solid\"\n            colorScheme=\"blue\"\n            onClick={props.verifyPasswordMs}\n          >\n            Verify\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default WalletPasswordModal;\n","import {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  HStack,\n  Popover,\n  PopoverContent,\n  PopoverBody,\n  PopoverArrow,\n  PopoverTrigger,\n  Text,\n  VStack,\n  Select,\n  Divider,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport React, { useState, useEffect } from \"react\";\nimport Icon from \"../../assets/icons\";\nimport PaymentPinModal from \"../../components/Modal/PaymentPinModal\";\nimport WalletActivationModal from \"../../components/Modal/WalletActivationModal\";\nimport WalletPasswordModal from \"../../components/Modal/WalletPasswordModal\";\nimport useToast from \"../../hooks/useToast\";\nimport useUser from \"../../hooks/useUser\";\nimport useWallet from \"../../hooks/useWallet\";\nimport {\n  IPinPasswordRequestPayload,\n  IPinRequestPayload,\n  IPinUpdateRequestPayload,\n} from \"../../interfaces/Auth\";\nimport { formatCurrency } from \"../../util/util\";\n\nfunction UserWallet() {\n  const { user } = useUser();\n  const {\n    isOpen: isOpenVerify,\n    onOpen: onOpenVerify,\n    onClose: onCloseVerify,\n  } = useDisclosure();\n  const {\n    isOpen: isOpenNew,\n    onOpen: onOpenNew,\n    onClose: onCloseNew,\n  } = useDisclosure();\n  const {\n    isOpen: isOpenConfig,\n    onOpen: onOpenConfig,\n    onClose: onCloseConfig,\n  } = useDisclosure();\n  const {\n    isOpen: isOpenAlert,\n    onOpen: onOpenAlert,\n    onClose: onCloseAlert,\n  } = useDisclosure();\n  const [pinInput, setPinInput] = useState(\"\");\n  const [passwordInput, setPasswordInput] = useState(\"\");\n  const [jwt, setJwt] = useState(\"\");\n  const { verifyPasswordPin, updatePin, activateWallet } = useWallet();\n  const { successToast, errorToast } = useToast();\n\n  const verifyPassword = async () => {\n    let payloadPin: IPinPasswordRequestPayload = {\n      password: passwordInput,\n    };\n\n    const response = await verifyPasswordPin(payloadPin);\n\n    if (response.is_success) {\n      successToast(\"Verified\");\n      onCloseVerify();\n      setPasswordInput(\"\");\n      setJwt(response.data.token);\n      onOpenNew();\n    } else {\n      setPasswordInput(\"\");\n      errorToast(\"Pin error\", response.message);\n      onCloseVerify();\n    }\n  };\n\n  const handleNewPin = async (value: string) => {\n    if (value.length === 6) {\n      let payloadPin: IPinUpdateRequestPayload = {\n        token: jwt,\n        pin: value,\n      };\n\n      const response = await updatePin(payloadPin);\n\n      if (response.is_success) {\n        successToast(\"Pin Updated Successfully\");\n        onCloseNew();\n        setPinInput(\"\");\n      } else {\n        errorToast(\"Error\", response.message);\n        setPinInput(\"\");\n        onCloseNew();\n      }\n    }\n  };\n\n  const handleNewWallet = async (value: string) => {\n    if (value.length === 6) {\n      let payloadPin: IPinRequestPayload = {\n        pin: value,\n      };\n\n      const response = await activateWallet(payloadPin);\n\n      if (response.is_success) {\n        successToast(\"Wallet Activated\");\n        onCloseConfig();\n        setPinInput(\"\");\n      } else {\n        errorToast(\"Error\", response.message);\n        setPinInput(\"\");\n        onCloseConfig();\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!user?.wallet_detail.is_activated) {\n      onOpenAlert();\n    }\n  }, []);\n\n  return (\n    <Box\n      px={{\n        base: \"1em\",\n        sm: \"2em\",\n        md: \"3em\",\n        lg: \"6em\",\n        xl: \"12em\",\n      }}\n      py={{\n        base: \"1em\",\n        sm: \"1.5em\",\n        md: \"2em\",\n        lg: \"2.5em\",\n        xl: \"4em\",\n      }}\n    >\n      <Flex width={\"100%\"} justifyContent={\"space-around\"}>\n        <VStack\n          alignItems={\"start\"}\n          border={\"2px\"}\n          width={\"40%\"}\n          p={8}\n          borderRadius={\"15px\"}\n          height={\"fit-content\"}\n        >\n          <HStack justifyContent={\"space-between\"} pb={5} width={\"100%\"}>\n            <Heading\n              size={{\n                base: \"md\",\n                sm: \"lg\",\n              }}\n              textAlign={\"center\"}\n            >\n              <Icon.Wallet boxSize={8} /> My Wallet{\" \"}\n              <Text fontSize={\"md\"} as=\"b\">\n                ID: {user?.wallet_detail.id}\n              </Text>\n            </Heading>\n            <Popover placement=\"bottom-end\">\n              <PopoverTrigger>\n                <Button\n                  backgroundColor={\"white\"}\n                  boxShadow={\"none\"}\n                  variant={\"unstyled\"}\n                >\n                  <Icon.Gear boxSize={6} fill={\"primary\"} />\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent width={\"fit-content\"}>\n                <PopoverArrow />\n                <PopoverBody>\n                  <Button onClick={onOpenVerify}>Change Wallet Pin</Button>\n                </PopoverBody>\n              </PopoverContent>\n            </Popover>\n          </HStack>\n\n          <Text fontSize={\"2.5em\"} as=\"b\">\n            Rp{formatCurrency(user?.wallet_detail.balance!)}\n          </Text>\n          <Divider />\n          <Flex width={\"100%\"} pt={5}>\n            {/* TODO: Link Top Up with BE */}\n            <Button variant=\"solid\" colorScheme=\"blue\">\n              Top-up\n            </Button>\n          </Flex>\n        </VStack>\n        <VStack\n          alignItems={\"start\"}\n          border={\"2px\"}\n          width={\"55%\"}\n          p={8}\n          borderRadius={\"15px\"}\n        >\n          <Heading\n            pb={3}\n            size={{\n              base: \"md\",\n              sm: \"lg\",\n            }}\n          >\n            Transaction History\n          </Heading>\n          <HStack width={\"100%\"} pb={7}>\n            {/* TODO: update with transaction history pagination */}\n            <Select placeholder=\"Select Date\">\n              <option value=\"option1\">Option 1</option>\n              <option value=\"option2\">Option 2</option>\n              <option value=\"option3\">Option 3</option>\n            </Select>\n            <Select placeholder=\"Payment Method\">\n              <option value=\"option1\">Option 1</option>\n              <option value=\"option2\">Option 2</option>\n              <option value=\"option3\">Option 3</option>\n            </Select>\n            <Select placeholder=\"Transaction Type\">\n              <option value=\"option1\">Option 1</option>\n              <option value=\"option2\">Option 2</option>\n              <option value=\"option3\">Option 3</option>\n            </Select>\n          </HStack>\n          <Divider />\n          <Box width={\"100%\"}>\n            {/* TODO: update with transaction history */}\n            <Text fontSize={\"x-large\"} py={6}>\n              Friday, Jan 11 2021\n            </Text>\n            <HStack width={\"100%\"} justifyContent={\"space-between\"}>\n              <Text>SeaLabs Pay Topup</Text>\n              <Text>+Rp10.000</Text>\n            </HStack>\n            <HStack width={\"100%\"} justifyContent={\"space-between\"}>\n              <Text>Payment</Text>\n              <Text>-Rp150.000</Text>\n            </HStack>\n          </Box>\n        </VStack>\n      </Flex>\n      <WalletPasswordModal\n        isOpen={isOpenVerify}\n        onOpen={onOpenVerify}\n        onClose={onCloseVerify}\n        setPasswordInput={setPasswordInput}\n        verifyPasswordKb={verifyPassword}\n        verifyPasswordMs={verifyPassword}\n      />\n      <PaymentPinModal\n        isOpen={isOpenNew}\n        onOpen={onOpenNew}\n        onClose={onCloseNew}\n        handlePinChange={handleNewPin}\n        pinInput={pinInput}\n        setPinInput={setPinInput}\n        title={\"Enter Your New 6 Digit Pin\"}\n      />\n      <PaymentPinModal\n        isOpen={isOpenConfig}\n        onOpen={onOpenConfig}\n        onClose={onCloseConfig}\n        handlePinChange={handleNewWallet}\n        pinInput={pinInput}\n        setPinInput={setPinInput}\n        title={\"Please Enter A 6 Digit Pin\"}\n      />\n      <WalletActivationModal\n        isOpen={isOpenAlert}\n        onOpen={onOpenAlert}\n        onClose={onCloseAlert}\n        nextModal={onOpenConfig}\n      />\n    </Box>\n  );\n}\n\nexport default UserWallet;\n"],"names":["props","onClose","size","isOpen","closeOnOverlayClick","backdropFilter","src","width","height","justifyContent","alignItems","gap","fontSize","base","sm","md","lg","xl","as","title","placeholder","onChange","value","setPinInput","handlePinChange","pinInput","mask","Array","map","_","i","boxSize","backgroundColor","borderColor","tabIndex","onClick","verifyPin","payload","instance","API_PATH","response","data","verifyPasswordWallet","paymentWallet","updatePin","activateWallet","toast","useToast","walletService","verifyPasswordPin","createPayment","paymentPayload","is_success","status","duration","position","isClosable","description","message","nextModal","variant","flexDirection","textAlign","mr","mt","mb","maxWidth","pr","type","event","setPasswordInput","currentTarget","onKeyDown","e","key","verifyPasswordKb","colorScheme","verifyPasswordMs","user","useUser","useDisclosure","isOpenVerify","onOpenVerify","onOpen","onCloseVerify","isOpenNew","onOpenNew","onCloseNew","isOpenConfig","onOpenConfig","onCloseConfig","isOpenAlert","onOpenAlert","onCloseAlert","useState","passwordInput","jwt","setJwt","useWallet","successToast","errorToast","verifyPassword","payloadPin","password","token","handleNewPin","length","pin","handleNewWallet","useEffect","wallet_detail","is_activated","px","py","border","p","borderRadius","pb","id","placement","boxShadow","fill","formatCurrency","balance","pt","PaymentPinModal"],"sourceRoot":""}