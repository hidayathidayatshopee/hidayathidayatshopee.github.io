{"version":3,"file":"static/js/5046.12192f51.chunk.js","mappings":"2LASMA,EAAe,yCAAG,WACtBC,GAA6B,qGAGJC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,SAAAA,SACAF,GACA,KAAD,EAHa,OAARG,EAAQ,yBAKPA,EAASC,MAAI,wHAIvB,gBAboB,sCAefC,EAAc,yCAAG,WACrBL,GAAe,qGAGUC,EAAAA,EAAAA,IACrBC,EAAAA,EAAAA,KAAAA,QAAqB,mBAAeF,IACpC,KAAD,EAFa,OAARG,EAAQ,yBAIPA,EAASC,MAAI,wHAIvB,gBAZmB,sCAcdE,EAAiB,yCAAG,WACxBN,GAAe,qGAGUC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KAAAA,QACA,CAAEK,YAAaP,IACf,KAAD,EAHa,OAARG,EAAQ,yBAKPA,EAASC,MAAI,wHAIvB,gBAbsB,sCAqBvB,EANwB,CACtBL,gBAAAA,EACAM,eAAAA,EACAC,kBAAAA,GC3BF,EA1BoB,WAClB,IAAME,EAAiB,yCAAG,WAAOR,GAA6B,4FACrCS,EAAAA,gBAAgCT,GAAS,KAAD,EAAjD,OAARG,EAAQ,yBAEPA,EAASC,MAAI,2CACrB,gBAJsB,sCAMjBM,EAAgB,yCAAG,WAAOV,GAAe,4FACtBS,EAAAA,eAA+BT,GAAS,KAAD,EAAhD,OAARG,EAAQ,yBAEPA,GAAQ,2CAChB,gBAJqB,sCAMhBG,EAAiB,yCAAG,WAAON,GAAe,4FACvBS,EAAAA,kBAAkCT,GAAS,KAAD,EAAnD,OAARG,EAAQ,yBAEPA,GAAQ,2CAChB,gBAJsB,sCAMvB,MAAO,CACLK,kBAAAA,EACAE,iBAAAA,EACAJ,kBAAAA,EAEJ,C,2JC4GA,UAtHiB,WACf,OAAgCK,EAAAA,EAAAA,UAAmB,IAAG,eAA/CC,EAAQ,KAAEC,EAAW,KAC5B,GAAgDC,EAAAA,EAAAA,KAAxCJ,EAAgB,EAAhBA,iBAAkBJ,EAAiB,EAAjBA,kBAC1B,GAAqCS,EAAAA,EAAAA,KAA7BC,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WACdC,GAASC,EAAAA,EAAAA,KAATD,KAGFE,IAFWC,EAAAA,EAAAA,MAEW,SAC1BC,EACAC,GAEA,IAAIC,EAAwB,GAG1BA,EADEF,EAAEG,cAAcC,QACP,kBAAOd,GAAQ,CAAEW,IAEdX,EAASe,QAAO,SAACC,GAAG,OAAKA,IAAQL,CAAE,IAGnDjB,EAAkBkB,EAAYK,KAAK,MAChCC,MAAK,SAACC,GACDA,EAAKC,YACPnB,EAAYW,GACZR,EAAa,4BAEbC,EAAW,2BAA4B,4BAE3C,IACCgB,OAAM,SAACC,GAAG,OAAKjB,EAAW,2BAA4BiB,EAAIC,QAAQ,GACvE,GAUA,OARAC,EAAAA,EAAAA,YAAU,WACR1B,EAAqB,OAAJQ,QAAI,IAAJA,OAAI,EAAJA,EAAMmB,SAAUP,MAAK,SAACC,GACjCA,EAAKC,YACPnB,EAAYkB,EAAK3B,KAAK,GAAGQ,SAAS0B,KAAI,SAACV,GAAG,OAAKA,EAAIL,EAAE,IAEzD,GACF,GAAG,KAGD,SAAC,KAAS,CAACgB,KAAM,eAAe,UAC9B,UAAC,KAAI,CAACC,QAAS,UAAWC,QAAS,KAAMC,EAAG,EAAGC,QAAS,QAAQ,WAC9D,UAAC,KAAU,YACT,SAAC,KAAI,CAACC,SAAU,MAAOC,WAAW,OAAM,sCAGxC,SAAC,KAAI,CAACD,SAAU,KAAMC,WAAW,WAAWC,MAAO,cAAc,qEAInE,SAAC,KAAQ,WACP,UAAC,KAAM,CAACC,WAAY,QAASC,MAAO,OAAQC,QAAS,EAAE,WACrD,UAAC,KAAM,CACLC,eAAgB,gBAChBF,MAAO,OACPG,OAAQ,YACRC,YAAa,eACbC,oBAAqB,KACrBC,qBAAsB,KACtBZ,EAAG,EACHa,GAAI,EAAE,WAEN,SAAC,KAAI,CAACV,WAAY,WAAYD,SAAU,KAAK,kBAG7C,SAAC,IAAM,CACLY,YAAY,UACZC,KAAK,KACLC,SAAU,SAACpC,GAAC,OAAKF,EAAoBE,EAAG,EAAE,EAC1CqC,UAAW/C,EAASgD,SAAS,SAGjC,UAAC,KAAM,CACLV,eAAgB,gBAChBF,MAAO,OACPa,WAAY,YACZC,YAAa,YACbV,YAAa,eACbV,EAAG,EACHa,GAAI,EAAE,WAEN,SAAC,KAAI,CAACV,WAAY,WAAYD,SAAU,KAAK,mBAG7C,SAAC,IAAM,CACLY,YAAY,UACZC,KAAK,KACLC,SAAU,SAACpC,GAAC,OAAKF,EAAoBE,EAAG,EAAE,EAC1CqC,UAAW/C,EAASgD,SAAS,SAGjC,UAAC,KAAM,CACLV,eAAgB,gBAChBF,MAAO,OACPG,OAAQ,YACRC,YAAa,eACbW,uBAAwB,KACxBC,wBAAyB,KACzBtB,EAAG,EACHa,GAAI,EAAE,WAEN,SAAC,KAAI,CAACV,WAAY,WAAYD,SAAU,KAAK,4BAG7C,SAAC,IAAM,CACLY,YAAY,UACZC,KAAK,KACLC,SAAU,SAACpC,GAAC,OAAKF,EAAoBE,EAAG,EAAE,EAC1CqC,UAAW/C,EAASgD,SAAS,iBAQ7C,C","sources":["api/service/shipping.ts","hooks/useShipping.ts","pages/Seller/Shipment/Shipment.tsx"],"sourcesContent":["import {\n  IShippingCostPayload,\n  IShippingCostResponse,\n} from \"../../interfaces/Shipping\";\nimport { ICourierListResponse } from \"../../interfaces/Shipping\";\nimport { IBaseResponsePayload } from \"../../interfaces/User\";\nimport instance from \"../config/axios\";\nimport { API_PATH } from \"../path\";\n\nconst getShippingCost = async (\n  payload: IShippingCostPayload\n): Promise<IShippingCostResponse> => {\n  try {\n    const response = await instance.post<IShippingCostResponse>(\n      API_PATH.shipping.SHIPPING,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IShippingCostResponse;\n  }\n};\n\nconst getCourierList = async (\n  payload: number\n): Promise<ICourierListResponse> => {\n  try {\n    const response = await instance.get<ICourierListResponse>(\n      API_PATH.shop.COURIER + `?shopIds=${payload}`\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ICourierListResponse;\n  }\n};\n\nconst updateCourierList = async (\n  payload: string\n): Promise<IBaseResponsePayload> => {\n  try {\n    const response = await instance.post<IBaseResponsePayload>(\n      API_PATH.shop.COURIER,\n      { courier_ids: payload }\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IBaseResponsePayload;\n  }\n};\n\nconst shippingService = {\n  getShippingCost,\n  getCourierList,\n  updateCourierList,\n};\n\nexport default shippingService;\n","import shippingService from \"../api/service/shipping\";\nimport { IShippingCostPayload } from \"../interfaces/Shipping\";\n\nconst useShipping = () => {\n  const fetchShippingCost = async (payload: IShippingCostPayload) => {\n    const response = await shippingService.getShippingCost(payload);\n\n    return response.data;\n  };\n\n  const fetchCourierList = async (payload: number) => {\n    const response = await shippingService.getCourierList(payload);\n\n    return response;\n  };\n\n  const updateCourierList = async (payload: string) => {\n    const response = await shippingService.updateCourierList(payload);\n\n    return response;\n  };\n\n  return {\n    fetchShippingCost,\n    fetchCourierList,\n    updateCourierList,\n  };\n};\n\nexport default useShipping;\n","import {\n  Card,\n  CardBody,\n  CardHeader,\n  Text,\n  HStack,\n  Switch,\n  VStack,\n  Container,\n  Button,\n} from \"@chakra-ui/react\";\nimport { ChangeEvent, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport useShipping from \"../../../hooks/useShipping\";\nimport useToast from \"../../../hooks/useToast\";\nimport useUser from \"../../../hooks/useUser\";\n\nconst Shipment = () => {\n  const [couriers, setCouriers] = useState<number[]>([]);\n  const { fetchCourierList, updateCourierList } = useShipping();\n  const { successToast, errorToast } = useToast();\n  const { user } = useUser();\n  const navigate = useNavigate();\n\n  const handleSelectCourier = (\n    e: ChangeEvent<HTMLInputElement>,\n    id: number\n  ) => {\n    let newCouriers: number[] = [];\n\n    if (e.currentTarget.checked) {\n      newCouriers = [...couriers, id];\n    } else {\n      newCouriers = couriers.filter((val) => val !== id);\n    }\n\n    updateCourierList(newCouriers.join(\",\"))\n      .then((resp) => {\n        if (resp.is_success) {\n          setCouriers(newCouriers);\n          successToast(\"Courier setting updated\");\n        } else {\n          errorToast(\"Failed to update courier\", \"Select at least 1 courier\");\n        }\n      })\n      .catch((err) => errorToast(\"Failed to update courier\", err.message));\n  };\n\n  useEffect(() => {\n    fetchCourierList(user?.shop_id!).then((resp) => {\n      if (resp.is_success) {\n        setCouriers(resp.data[0].couriers.map((val) => val.id));\n      }\n    });\n  }, []);\n\n  return (\n    <Container maxW={\"container.md\"}>\n      <Card variant={\"outline\"} rounded={\"xl\"} p={5} bgColor={\"white\"}>\n        <CardHeader>\n          <Text fontSize={\"2xl\"} fontWeight=\"bold\">\n            Shipping Option Setting\n          </Text>\n          <Text fontSize={\"sm\"} fontWeight=\"semibold\" color={\"darkLighten\"}>\n            Select your preferred method(s) to ship your goods.\n          </Text>\n        </CardHeader>\n        <CardBody>\n          <VStack alignItems={\"start\"} width={\"100%\"} spacing={0}>\n            <HStack\n              justifyContent={\"space-between\"}\n              width={\"100%\"}\n              border={\"2px solid\"}\n              borderColor={\"lightLighten\"}\n              borderTopLeftRadius={\"lg\"}\n              borderTopRightRadius={\"lg\"}\n              p={3}\n              py={5}\n            >\n              <Text fontWeight={\"semibold\"} fontSize={\"md\"}>\n                JNE\n              </Text>\n              <Switch\n                colorScheme=\"default\"\n                size=\"lg\"\n                onChange={(e) => handleSelectCourier(e, 1)}\n                isChecked={couriers.includes(1)}\n              />\n            </HStack>\n            <HStack\n              justifyContent={\"space-between\"}\n              width={\"100%\"}\n              borderLeft={\"2px solid\"}\n              borderRight={\"2px solid\"}\n              borderColor={\"lightLighten\"}\n              p={3}\n              py={5}\n            >\n              <Text fontWeight={\"semibold\"} fontSize={\"md\"}>\n                TIKI\n              </Text>\n              <Switch\n                colorScheme=\"default\"\n                size=\"lg\"\n                onChange={(e) => handleSelectCourier(e, 2)}\n                isChecked={couriers.includes(2)}\n              />\n            </HStack>\n            <HStack\n              justifyContent={\"space-between\"}\n              width={\"100%\"}\n              border={\"2px solid\"}\n              borderColor={\"lightLighten\"}\n              borderBottomLeftRadius={\"lg\"}\n              borderBottomRightRadius={\"lg\"}\n              p={3}\n              py={5}\n            >\n              <Text fontWeight={\"semibold\"} fontSize={\"md\"}>\n                POS INDONESIA\n              </Text>\n              <Switch\n                colorScheme=\"default\"\n                size=\"lg\"\n                onChange={(e) => handleSelectCourier(e, 3)}\n                isChecked={couriers.includes(3)}\n              />\n            </HStack>\n          </VStack>\n        </CardBody>\n      </Card>\n    </Container>\n  );\n};\n\nexport default Shipment;\n"],"names":["getShippingCost","payload","instance","API_PATH","response","data","getCourierList","updateCourierList","courier_ids","fetchShippingCost","shippingService","fetchCourierList","useState","couriers","setCouriers","useShipping","useToast","successToast","errorToast","user","useUser","handleSelectCourier","useNavigate","e","id","newCouriers","currentTarget","checked","filter","val","join","then","resp","is_success","catch","err","message","useEffect","shop_id","map","maxW","variant","rounded","p","bgColor","fontSize","fontWeight","color","alignItems","width","spacing","justifyContent","border","borderColor","borderTopLeftRadius","borderTopRightRadius","py","colorScheme","size","onChange","isChecked","includes","borderLeft","borderRight","borderBottomLeftRadius","borderBottomRightRadius"],"sourceRoot":""}