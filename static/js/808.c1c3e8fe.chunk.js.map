{"version":3,"file":"static/js/808.c1c3e8fe.chunk.js","mappings":"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","sources":["api/service/auth.ts","pages/Auth/ResetRequest.tsx"],"sourcesContent":["import { AxiosError } from \"axios\";\nimport {\n  IChangePasswordRequestPayload,\n  ILoginGoogleRequestPayload,\n  ILoginRequestPayload,\n  ILoginResponsePayload,\n  IPasswordResponsePayload,\n  IRefreshRequestPayload,\n  IRefreshResponsePayload,\n  IRegisterMerchantRequestPayload,\n  IRegisterRequestPayload,\n  IRegisterResponsePayload,\n  IResetPasswordRequestPayload,\n} from \"../../interfaces/Auth\";\nimport instance from \"../config/axios\";\nimport { API_PATH } from \"../path\";\n\nconst register = async (\n  payload: IRegisterRequestPayload\n): Promise<IRegisterResponsePayload> => {\n  try {\n    const response = await instance.post<IRegisterResponsePayload>(\n      API_PATH.auth.REGISTER,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRegisterResponsePayload;\n  }\n};\n\nconst registerMerchant = async (\n  payload: IRegisterMerchantRequestPayload\n): Promise<IRegisterResponsePayload> => {\n  try {\n    const response = await instance.post<IRegisterResponsePayload>(\n      API_PATH.auth.REGISTER_MERCHANT,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRegisterResponsePayload;\n  }\n};\n\nconst login = async ({\n  email,\n  password,\n}: ILoginRequestPayload): Promise<ILoginResponsePayload> => {\n  try {\n    const response = await instance.post<ILoginResponsePayload>(\n      API_PATH.auth.LOGIN,\n      {\n        email,\n        password,\n      }\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ILoginResponsePayload;\n  }\n};\n\nconst loginGoogle = async (\n  payload: ILoginGoogleRequestPayload\n): Promise<ILoginResponsePayload> => {\n  try {\n    const response = await instance.post<ILoginResponsePayload>(\n      API_PATH.auth.LOGIN_GOOGLE,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ILoginResponsePayload;\n  }\n};\n\nconst refresh = async (\n  payload: IRefreshRequestPayload\n): Promise<IRefreshResponsePayload> => {\n  try {\n    const response = await instance.post<IRefreshResponsePayload>(\n      API_PATH.auth.REFRESH,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRefreshResponsePayload;\n  }\n};\n\nconst checkEmail = async (email: string) => {\n  try {\n    const response = await instance.post(API_PATH.user.PROFILE, { email });\n\n    if (response.status >= 200 && response.status <= 300) {\n      return response.data;\n    }\n  } catch (e: unknown) {\n    const error = e as AxiosError;\n    return error.response?.data;\n  }\n};\n\nconst resetPassword = async (\n  payload: IResetPasswordRequestPayload\n): Promise<IPasswordResponsePayload> => {\n  try {\n    const response = await instance.post<IPasswordResponsePayload>(\n      API_PATH.auth.PASSWORD,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPasswordResponsePayload;\n  }\n};\n\nconst changePassword = async (\n  payload: IChangePasswordRequestPayload\n): Promise<IPasswordResponsePayload> => {\n  try {\n    const response = await instance.put<IPasswordResponsePayload>(\n      API_PATH.auth.PASSWORD,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPasswordResponsePayload;\n  }\n};\n\nconst authService = {\n  register,\n  registerMerchant,\n  login,\n  loginGoogle,\n  refresh,\n  checkEmail,\n  resetPassword,\n  changePassword,\n};\n\nexport default authService;\n","import {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  Input,\n  Link,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Field, Formik } from \"formik\";\nimport { useState } from \"react\";\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport authService from \"../../api/service/auth\";\nimport useToast from \"../../hooks/useToast\";\nimport { IResetPasswordRequestPayload } from \"../../interfaces/Auth\";\n\nfunction ResetRequest() {\n  const navigate = useNavigate();\n  const { successToast, errorToast } = useToast();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmitResetRequest = async (\n    payload: IResetPasswordRequestPayload\n  ) => {\n    setIsLoading(true);\n    const response = await authService\n      .resetPassword(payload)\n      .finally(() => setIsLoading(false));\n\n    if (response.is_success) {\n      successToast(\n        \"Password request email has been sent! Please check your email.\"\n      );\n      navigate(\"/\");\n    } else {\n      errorToast(\"Failed to login\", response.message);\n    }\n  };\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  });\n\n  return (\n    <>\n      <Box textAlign=\"center\">\n        <Heading>Reset your password</Heading>\n        <Text mt={2}>Request an email reset link</Text>\n      </Box>\n      <Box textAlign=\"left\" my={4}>\n        <Formik\n          initialValues={{\n            email: \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(values) => {\n            handleSubmitResetRequest(values);\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <FormControl isInvalid={!!errors.email && touched.email}>\n                <FormLabel>Email</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email address\"\n                  variant=\"filled\"\n                />\n                <FormErrorMessage>{errors.email}</FormErrorMessage>\n              </FormControl>\n\n              <Button\n                variant=\"primary\"\n                width=\"full\"\n                my={5}\n                type=\"submit\"\n                isLoading={isLoading}\n              >\n                Send link\n              </Button>\n            </form>\n          )}\n        </Formik>\n      </Box>\n      <Box textAlign=\"center\" mt={5}>\n        <Text>\n          Or{\" \"}\n          <Link as={RouterLink} to=\"/register\" color=\"teal.500\">\n            sign up now!\n          </Link>\n        </Text>\n      </Box>\n    </>\n  );\n}\n\nexport default ResetRequest;\n"],"names":["register","payload","instance","API_PATH","response","data","registerMerchant","login","email","password","loginGoogle","refresh","checkEmail","status","error","resetPassword","changePassword","authService","navigate","useNavigate","useToast","successToast","errorToast","useState","isLoading","setIsLoading","handleSubmitResetRequest","finally","is_success","message","validationSchema","Yup","shape","required","textAlign","mt","my","initialValues","onSubmit","values","handleSubmit","errors","touched","isInvalid","as","Input","name","type","placeholder","variant","width","RouterLink","to","color"],"sourceRoot":""}