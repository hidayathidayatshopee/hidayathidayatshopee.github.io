{"version":3,"file":"static/js/6562.fbc2ad9f.chunk.js","mappings":"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","sources":["api/service/shopPromotion.ts","hooks/useShopPromotion.ts","pages/Seller/Promotion/PromotionBulkForm.tsx","pages/Seller/Promotion/PromotionProductForm.tsx","pages/Seller/Promotion/PromotionShopProduct.tsx","pages/Seller/Promotion/PromotionForm.tsx"],"sourcesContent":["import {\n  IShopPromotionPayload,\n  IShopPromotionResponsePayload,\n  IShopPromotionsResponsePayload,\n} from \"../../interfaces/Promotion\";\nimport instance from \"../config/axios\";\nimport { API_PATH } from \"../path\";\n\nconst getAllShopPromotions = async (\n  status: string,\n  page: number,\n  limit: number\n): Promise<IShopPromotionsResponsePayload> => {\n  try {\n    const response = await instance.get<IShopPromotionsResponsePayload>(\n      API_PATH.shop.SHOPS_PROMOTION +\n        `?status=${status}&page=${page}&limit=${limit}`\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IShopPromotionsResponsePayload;\n  }\n};\n\nconst getShopPromotion = async (\n  id: number\n): Promise<IShopPromotionResponsePayload> => {\n  try {\n    const response = await instance.get<IShopPromotionResponsePayload>(\n      API_PATH.shop.SHOPS_PROMOTION + `/${id}`\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IShopPromotionResponsePayload;\n  }\n};\n\nconst postShopPromotion = async (\n  payload: IShopPromotionPayload\n): Promise<IShopPromotionResponsePayload> => {\n  try {\n    const response = await instance.post<IShopPromotionResponsePayload>(\n      API_PATH.shop.SHOPS_PROMOTION,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IShopPromotionResponsePayload;\n  }\n};\n\nconst putShopPromotion = async (\n  payload: IShopPromotionPayload\n): Promise<IShopPromotionResponsePayload> => {\n  try {\n    const response = await instance.put<IShopPromotionResponsePayload>(\n      API_PATH.shop.SHOPS_PROMOTION + `/${payload.id}`,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IShopPromotionResponsePayload;\n  }\n};\n\nconst shopPromotionService = {\n  getAllShopPromotions,\n  getShopPromotion,\n  postShopPromotion,\n  putShopPromotion,\n};\n\nexport default shopPromotionService;\n","import { useState } from \"react\";\nimport shopPromotionService from \"../api/service/shopPromotion\";\nimport { IProductPayload } from \"../interfaces/Product\";\nimport {\n  IPromotionProductForm,\n  IShopPromotionPaginationPayload,\n  IShopPromotionPayload,\n  IShopPromotionProductPayload,\n} from \"../interfaces/Promotion\";\n\nconst useShopPromotion = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [shopPromotion, setShopPromotion] = useState<IShopPromotionPayload>();\n  const [shopPromotions, setShopPromotions] =\n    useState<IShopPromotionPaginationPayload>();\n\n  const fetchAllShopPromotions = async (\n    status: string,\n    page: number,\n    limit: number\n  ) => {\n    setIsLoading(true);\n    const response = await shopPromotionService.getAllShopPromotions(\n      status,\n      page,\n      limit\n    );\n    setIsLoading(false);\n\n    if (response.is_success) {\n      setShopPromotions(response.data);\n    }\n\n    return response;\n  };\n\n  const fetchShopPromotion = async (id: number) => {\n    setIsLoading(true);\n    const response = await shopPromotionService.getShopPromotion(id);\n    setIsLoading(false);\n\n    if (response.is_success) {\n      setShopPromotion(response.data);\n    }\n\n    return response;\n  };\n\n  const addShopPromotion = async (payload: IShopPromotionPayload) => {\n    setIsLoading(true);\n    const response = await shopPromotionService.postShopPromotion(payload);\n    setIsLoading(false);\n\n    return response;\n  };\n\n  const updateShopPromotion = async (payload: IShopPromotionPayload) => {\n    setIsLoading(true);\n    const response = await shopPromotionService.putShopPromotion(payload);\n    setIsLoading(false);\n\n    return response;\n  };\n\n  const convertVariantProductToProductForm = (\n    variantProducts: IShopPromotionProductPayload[]\n  ): IPromotionProductForm[] => {\n    const newProductForm: IPromotionProductForm[] = [];\n\n    const productGroups = variantProducts.filter(\n      (variant, index) =>\n        index ===\n        variantProducts.findIndex(\n          (other) => variant.product_id === other.product_id\n        )\n    );\n\n    productGroups.forEach((productGroup, index) => {\n      newProductForm[index] = {\n        id: productGroup.product_id,\n        name: productGroup.product_name,\n        in_form: true,\n        variants: [],\n      };\n\n      variantProducts.forEach((val) => {\n        if (val.product_id === productGroup.product_id) {\n          newProductForm[index].variants.push({\n            price: 0,\n            benefit: val.benefit,\n            benefit_percentage: val.benefit_percentage,\n            is_active: true,\n            quota: val.quota,\n            variant_type_id: val.variant_type_id,\n            variant_name: val.variant_type_name,\n            max_buy_qty: val.max_buy_qty,\n          });\n        }\n      });\n    });\n\n    return newProductForm;\n  };\n\n  const addProductVariationFormNotActive = (\n    productsForm: IPromotionProductForm[],\n    products: IProductPayload[]\n  ): IPromotionProductForm[] => {\n    const result: IPromotionProductForm[] = [];\n\n    productsForm.forEach((productForm, index) => {\n      result[index] = productForm;\n\n      products.forEach((product) => {\n        if (product.id === productForm.id) {\n          product.variant_group?.variant_types.forEach((variant) => {\n            let isAvailable: boolean = false;\n\n            productForm.variants.forEach((variantForm, ind) => {\n              if (variant.id === variantForm.variant_type_id) {\n                result[index].variants[ind].price = variant.price;\n                isAvailable = true;\n                return;\n              }\n            });\n\n            if (!isAvailable) {\n              result[index].variants.push({\n                price: variant.price,\n                benefit: 0,\n                benefit_percentage: 0,\n                is_active: false,\n                max_buy_qty: 0,\n                quota: 0,\n                variant_name: variant.name,\n                variant_type_id: variant.id,\n              });\n            }\n          });\n        }\n      });\n    });\n\n    return result;\n  };\n\n  return {\n    fetchAllShopPromotions,\n    fetchShopPromotion,\n    addShopPromotion,\n    updateShopPromotion,\n    convertVariantProductToProductForm,\n    addProductVariationFormNotActive,\n    isLoading,\n    shopPromotions,\n    shopPromotion,\n  };\n};\n\nexport default useShopPromotion;\n","import {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  InputRightAddon,\n  SimpleGrid,\n} from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport {\n  IPromotionBulkForm,\n  IPromotionBulkFormProps,\n} from \"../../../interfaces/Promotion\";\n\nfunction PromotionBulkForm(props: IPromotionBulkFormProps) {\n  const [input, setInput] = useState<IPromotionBulkForm>({\n    quota: \"\",\n    benefit: \"\",\n    benefit_percentage: \"\",\n    max_buy_qty: \"\",\n  });\n\n  const [inputError, setInputError] = useState({\n    quota: \"\",\n    benefit_percentage: \"\",\n  });\n\n  const [inputDisabled, setInputDisabled] = useState({\n    benefit: false,\n    benefit_percentage: false,\n  });\n\n  const handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInput({\n      ...input,\n      [e.currentTarget.name]:\n        e.currentTarget.value === \"\" ? \"\" : Number(e.currentTarget.value),\n    });\n    setInputError({ quota: \"\", benefit_percentage: \"\" });\n  };\n\n  const handleChangeInputBenefit = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputDisabled({\n      benefit: false,\n      benefit_percentage: false,\n    });\n\n    if (e.currentTarget.value !== \"\") {\n      setInputDisabled({\n        benefit: false,\n        benefit_percentage: true,\n      });\n    }\n\n    handleChangeInput(e);\n  };\n\n  const handleChangeInputBenefitPercentage = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setInputDisabled({\n      benefit: false,\n      benefit_percentage: false,\n    });\n\n    if (e.currentTarget.value !== \"\") {\n      setInputDisabled({\n        benefit: true,\n        benefit_percentage: false,\n      });\n    }\n\n    handleChangeInput(e);\n  };\n\n  const handleOnSubmit = () => {\n    const isError = validateInputError();\n    props.onSubmit(input, isError);\n  };\n\n  const validateInputError = (): boolean => {\n    let isError = false;\n    setInputError({ quota: \"\", benefit_percentage: \"\" });\n\n    if (typeof input.quota === \"number\" && input.quota <= 0) {\n      setInputError((prev) => ({\n        ...prev,\n        quota: \"must be greater than 0\",\n      }));\n      isError = true;\n    }\n\n    if (input.benefit > 0 && input.benefit_percentage > 0) {\n      setInputError((prev) => ({\n        ...prev,\n        benefit_percentage:\n          \"fill in one of the benefit or benefit percentage fields\",\n      }));\n      isError = true;\n    }\n\n    if (input.benefit_percentage < 0 || input.benefit_percentage > 100) {\n      setInputError((prev) => ({\n        ...prev,\n        benefit_percentage: \"min 0 and max 100\",\n      }));\n      isError = true;\n    }\n\n    return isError;\n  };\n\n  return (\n    <Box rounded={\"lg\"} border={\"1px\"} borderColor={\"gray.200\"} p={5} my={5}>\n      <SimpleGrid\n        columns={{\n          base: 1,\n          sm: 1,\n          md: 2,\n          xl: 4,\n        }}\n        spacingX={10}\n        spacingY={5}\n      >\n        <FormControl isInvalid={inputError.quota !== \"\"}>\n          <FormLabel>Quota</FormLabel>\n          <Input\n            type=\"number\"\n            name=\"quota\"\n            onChange={(e) => handleChangeInput(e)}\n          />\n          <FormErrorMessage>{inputError.quota}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Benefit</FormLabel>\n          <InputGroup>\n            <InputLeftAddon children=\"Rp\" />\n            <Input\n              type=\"number\"\n              name=\"benefit\"\n              variant={inputDisabled.benefit ? \"filled\" : \"outline\"}\n              isDisabled={inputDisabled.benefit}\n              _disabled={{\n                opacity: 1,\n              }}\n              onChange={(e) => handleChangeInputBenefit(e)}\n            />\n          </InputGroup>\n        </FormControl>\n\n        <FormControl isInvalid={inputError.benefit_percentage !== \"\"}>\n          <FormLabel>Benefit Percentage</FormLabel>\n          <InputGroup>\n            <Input\n              type=\"number\"\n              name=\"benefit_percentage\"\n              variant={inputDisabled.benefit_percentage ? \"filled\" : \"outline\"}\n              isDisabled={inputDisabled.benefit_percentage}\n              _disabled={{\n                opacity: 1,\n              }}\n              onChange={(e) => handleChangeInputBenefitPercentage(e)}\n            />\n            <InputRightAddon children=\"%\" />\n          </InputGroup>\n          <FormErrorMessage>{inputError.benefit_percentage}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Max Buy</FormLabel>\n          <Input\n            type=\"number\"\n            name=\"max_buy_qty\"\n            onChange={(e) => handleChangeInput(e)}\n          />\n        </FormControl>\n      </SimpleGrid>\n      <Flex justifyContent={\"end\"} mt={5}>\n        <Button onClick={() => handleOnSubmit()}>Apply All</Button>\n      </Flex>\n    </Box>\n  );\n}\n\nexport default PromotionBulkForm;\n","import {\n  FormControl,\n  FormErrorMessage,\n  IconButton,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  InputRightAddon,\n  Skeleton,\n  Switch,\n  Table,\n  TableContainer,\n  Tag,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tooltip,\n  Tr,\n} from \"@chakra-ui/react\";\nimport { Field, FieldArray, getIn } from \"formik\";\nimport React from \"react\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { IPromotionProductFormProps } from \"../../../interfaces/Promotion\";\nimport { formatCurrency } from \"../../../util/util\";\n\nfunction PromotionProductForm(props: IPromotionProductFormProps) {\n  return (\n    <>\n      <Skeleton isLoaded={!props.isLoading}>\n        <TableContainer\n          border={\"1px\"}\n          rounded={\"lg\"}\n          borderColor={\"gray.200\"}\n          py={3}\n        >\n          <Table variant={\"unstyled\"}>\n            <Thead>\n              <Tr>\n                <Th>Variant</Th>\n                <Th isNumeric>Quota</Th>\n                <Th isNumeric>Benefit</Th>\n                <Th isNumeric>Benefit percentage</Th>\n                <Th isNumeric>Max Buy</Th>\n                <Th>Active</Th>\n                <Th>action</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              <FieldArray\n                name={\"products\"}\n                render={(arrayHelpers1) => {\n                  return (\n                    <>\n                      {props.values.products.length === 0 ? (\n                        <Tr>\n                          <Td colSpan={7} textAlign={\"center\"}>\n                            Empty Data\n                          </Td>\n                        </Tr>\n                      ) : null}\n\n                      {props.values.products.map((product, index1) => (\n                        <React.Fragment key={index1}>\n                          <Tr bgColor={\"gray.100\"}>\n                            <Td colSpan={6}>{product.name}</Td>\n                            <Td>\n                              {props.isDisabled ? null : (\n                                <Tooltip label=\"Delete Product\">\n                                  <IconButton\n                                    aria-label=\"Delete\"\n                                    bgColor={\"red\"}\n                                    icon={<BsTrash />}\n                                    onClick={() => {\n                                      props.onDeleteProduct(product.id);\n                                      arrayHelpers1.remove(index1);\n                                    }}\n                                  />\n                                </Tooltip>\n                              )}\n                            </Td>\n                          </Tr>\n                          <FieldArray\n                            name={`products.${index1}.variants`}\n                            render={() => {\n                              return (\n                                <>\n                                  {product.variants.map((variant, index2) => (\n                                    <Tr key={index2}>\n                                      <Td verticalAlign={\"top\"}>\n                                        <Text my={3}>\n                                          {variant.variant_name}{\" \"}\n                                          <Tag colorScheme={\"gray\"}>\n                                            Rp\n                                            {formatCurrency(variant.price)}\n                                          </Tag>\n                                        </Text>\n                                      </Td>\n                                      <Td\n                                        verticalAlign={\"top\"}\n                                        isNumeric\n                                        alignItems={\"start\"}\n                                      >\n                                        <FormControl\n                                          isInvalid={\n                                            !!getIn(\n                                              props.errors,\n                                              `products.${index1}.variants.${index2}.quota`\n                                            ) &&\n                                            getIn(\n                                              props.touched,\n                                              `products.${index1}.variants.${index2}.quota`\n                                            )\n                                          }\n                                        >\n                                          <Field\n                                            as={Input}\n                                            type=\"number\"\n                                            name={`products.${index1}.variants.${index2}.quota`}\n                                            variant={\n                                              props.isDisabled ||\n                                              !props.values.products[index1]\n                                                .variants[index2].is_active\n                                                ? \"filled\"\n                                                : \"outline\"\n                                            }\n                                            _disabled={{\n                                              opacity: 1,\n                                            }}\n                                            isDisabled={\n                                              props.isDisabled ||\n                                              !props.values.products[index1]\n                                                .variants[index2].is_active\n                                            }\n                                          />\n                                          <FormErrorMessage>\n                                            {getIn(\n                                              props.errors,\n                                              `products.${index1}.variants.${index2}.quota`\n                                            )}\n                                          </FormErrorMessage>\n                                        </FormControl>\n                                      </Td>\n                                      <Td verticalAlign={\"top\"} isNumeric>\n                                        <FormControl\n                                          isInvalid={\n                                            !!getIn(\n                                              props.errors,\n                                              `products.${index1}.variants.${index2}.benefit`\n                                            ) &&\n                                            getIn(\n                                              props.touched,\n                                              `products.${index1}.variants.${index2}.benefit`\n                                            )\n                                          }\n                                        >\n                                          <InputGroup>\n                                            <InputLeftAddon children=\"Rp\" />\n                                            <Field\n                                              as={Input}\n                                              type=\"number\"\n                                              name={`products.${index1}.variants.${index2}.benefit`}\n                                              minWidth={\"150px\"}\n                                              borderStartRadius={0}\n                                              variant={\n                                                props.isDisabled ||\n                                                !props.values.products[index1]\n                                                  .variants[index2].is_active ||\n                                                props.values.products[index1]\n                                                  .variants[index2]\n                                                  .benefit_percentage > 0\n                                                  ? \"filled\"\n                                                  : \"outline\"\n                                              }\n                                              _disabled={{\n                                                opacity: 1,\n                                              }}\n                                              isDisabled={\n                                                props.isDisabled ||\n                                                !props.values.products[index1]\n                                                  .variants[index2].is_active ||\n                                                props.values.products[index1]\n                                                  .variants[index2]\n                                                  .benefit_percentage > 0\n                                              }\n                                            />\n                                          </InputGroup>\n                                          <FormErrorMessage>\n                                            {getIn(\n                                              props.errors,\n                                              `products.${index1}.variants.${index2}.benefit`\n                                            )}\n                                          </FormErrorMessage>\n                                        </FormControl>\n                                      </Td>\n                                      <Td verticalAlign={\"top\"} isNumeric>\n                                        <FormControl\n                                          isInvalid={\n                                            !!getIn(\n                                              props.errors,\n                                              `products.${index1}.variants.${index2}.benefit_percentage`\n                                            ) &&\n                                            getIn(\n                                              props.touched,\n                                              `products.${index1}.variants.${index2}.benefit_percentage`\n                                            )\n                                          }\n                                        >\n                                          <InputGroup>\n                                            <Field\n                                              as={Input}\n                                              type=\"number\"\n                                              min={0}\n                                              max={100}\n                                              borderEndRadius={0}\n                                              name={`products.${index1}.variants.${index2}.benefit_percentage`}\n                                              variant={\n                                                props.isDisabled ||\n                                                !props.values.products[index1]\n                                                  .variants[index2].is_active ||\n                                                props.values.products[index1]\n                                                  .variants[index2].benefit > 0\n                                                  ? \"filled\"\n                                                  : \"outline\"\n                                              }\n                                              _disabled={{\n                                                opacity: 1,\n                                              }}\n                                              isDisabled={\n                                                props.isDisabled ||\n                                                !props.values.products[index1]\n                                                  .variants[index2].is_active ||\n                                                props.values.products[index1]\n                                                  .variants[index2].benefit > 0\n                                              }\n                                            />\n                                            <InputRightAddon children=\"%\" />\n                                          </InputGroup>\n                                          <FormErrorMessage>\n                                            {getIn(\n                                              props.errors,\n                                              `products.${index1}.variants.${index2}.benefit_percentage`\n                                            )}\n                                          </FormErrorMessage>\n                                        </FormControl>\n                                      </Td>\n                                      <Td verticalAlign={\"top\"} isNumeric>\n                                        <FormControl\n                                          isInvalid={\n                                            !!getIn(\n                                              props.errors,\n                                              `products.${index1}.variants.${index2}.max_buy_qty`\n                                            ) &&\n                                            getIn(\n                                              props.touched,\n                                              `products.${index1}.variants.${index2}.max_buy_qty`\n                                            )\n                                          }\n                                        >\n                                          <Field\n                                            as={Input}\n                                            type=\"number\"\n                                            name={`products.${index1}.variants.${index2}.max_buy_qty`}\n                                            variant={\n                                              props.isDisabled ||\n                                              !props.values.products[index1]\n                                                .variants[index2].is_active\n                                                ? \"filled\"\n                                                : \"outline\"\n                                            }\n                                            _disabled={{\n                                              opacity: 1,\n                                            }}\n                                            isDisabled={\n                                              props.isDisabled ||\n                                              !props.values.products[index1]\n                                                .variants[index2].is_active\n                                            }\n                                          />\n                                          <FormErrorMessage>\n                                            {getIn(\n                                              props.errors,\n                                              `products.${index1}.variants.${index2}.max_buy_qty`\n                                            )}\n                                          </FormErrorMessage>\n                                        </FormControl>\n                                      </Td>\n                                      <Td verticalAlign={\"top\"}>\n                                        <Switch\n                                          my={1}\n                                          size=\"lg\"\n                                          name={`products.${index1}.variants.${index2}.is_active`}\n                                          isDisabled={props.isDisabled}\n                                          isChecked={\n                                            props.values.products[index1]\n                                              .variants[index2].is_active\n                                          }\n                                          onChange={(e) => {\n                                            props.handleChange(e);\n                                          }}\n                                        />\n                                      </Td>\n                                    </Tr>\n                                  ))}\n                                </>\n                              );\n                            }}\n                          ></FieldArray>\n                        </React.Fragment>\n                      ))}\n                    </>\n                  );\n                }}\n              ></FieldArray>\n            </Tbody>\n          </Table>\n        </TableContainer>\n      </Skeleton>\n    </>\n  );\n}\n\nexport default PromotionProductForm;\n","import {\n  Button,\n  Checkbox,\n  Flex,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Table,\n  TableContainer,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n} from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport useProduct from \"../../../hooks/useProduct\";\nimport {\n  IProductPaginationPayload,\n  IProductPayload,\n} from \"../../../interfaces/Product\";\nimport {\n  IPromotionProductForm,\n  IPromotionShopProductProps,\n  IPromotionVariantForm,\n} from \"../../../interfaces/Promotion\";\nimport { IVariantTypePayload } from \"../../../interfaces/Variant\";\nimport { formatCurrency } from \"../../../util/util\";\n\nfunction PromotionShopProduct(props: IPromotionShopProductProps) {\n  const { fetchShopProducts } = useProduct();\n  const [products, setProducts] = useState<IProductPaginationPayload>();\n  const [checked, setChecked] = useState<IPromotionProductForm[]>([]);\n\n  const isChecked = (productId: number): boolean => {\n    return checked.some((product) => product.id === productId);\n  };\n\n  const isCheckedDisabled = (productId: number): boolean => {\n    return checked.some(\n      (product) => product.id === productId && product.in_form\n    );\n  };\n\n  const handleCheckProduct = (isChecked: boolean, product: IProductPayload) => {\n    const productForm = convertProductToProductForm(product);\n    if (isChecked) {\n      setChecked([...checked, productForm]);\n    } else {\n      setChecked(checked.filter((item) => item.id !== product.id));\n    }\n  };\n\n  const convertProductToProductForm = (\n    product: IProductPayload,\n    inForm: boolean = false\n  ): IPromotionProductForm => {\n    const newVariants = product.variant_group?.variant_types.map((variant) => {\n      return {\n        variant_type_id: variant.id,\n        variant_name: variant.name,\n        price: variant.price,\n        benefit: 0,\n        benefit_percentage: 0,\n        is_active: true,\n        max_buy_qty: 0,\n        quota: 0,\n      } as IPromotionVariantForm;\n    });\n\n    return {\n      id: product.id,\n      name: product.name,\n      in_form: inForm,\n      variants: newVariants,\n    } as IPromotionProductForm;\n  };\n\n  const textProductPrice = (variants: IVariantTypePayload[]): string => {\n    const high = Math.max(...variants.map((v) => v.price));\n    const low = Math.min(...variants.map((v) => v.price));\n\n    if (low === high) {\n      return `Rp${formatCurrency(low)}`;\n    }\n\n    return `Rp${formatCurrency(low)} - Rp${formatCurrency(high)}`;\n  };\n\n  const handleNextPage = () => {\n    const page = (products?.current_page ?? 0) + 1;\n\n    fetchShopProducts(1, { page: page, limit: 5 }).then((response) =>\n      setProducts(response as IProductPaginationPayload)\n    );\n  };\n\n  const handlePrevPage = () => {\n    const page = (products?.current_page ?? 0) - 1;\n\n    fetchShopProducts(1, { page: page, limit: 5 }).then((response) =>\n      setProducts(response as IProductPaginationPayload)\n    );\n  };\n\n  useEffect(() => {\n    fetchShopProducts(1, { page: 1, limit: 5 }).then((response) =>\n      setProducts(response as IProductPaginationPayload)\n    );\n  }, []);\n\n  useEffect(() => {\n    setChecked([...props.checkedProduct]);\n  }, [props.checkedProduct]);\n\n  return (\n    <>\n      <Modal isOpen={props.isOpen} onClose={props.onClose} size={\"4xl\"}>\n        <ModalOverlay />\n        <ModalContent rounded={\"lg\"}>\n          <ModalHeader>Choose Product</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <TableContainer>\n              <Table>\n                <Thead>\n                  <Tr>\n                    <Th>#</Th>\n                    <Th>Name</Th>\n                    <Th>Unit Sold</Th>\n                    <Th>Price</Th>\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {products?.data.map((product, index) => (\n                    <Tr key={index}>\n                      <Td>\n                        <Checkbox\n                          isDisabled={isCheckedDisabled(product.id)}\n                          isChecked={isChecked(product.id)}\n                          onChange={(event) =>\n                            handleCheckProduct(event.target.checked, product)\n                          }\n                        ></Checkbox>\n                      </Td>\n                      <Td>{product.name}</Td>\n                      <Td>{product.unit_sold}</Td>\n                      <Td>\n                        {textProductPrice(\n                          product.variant_group?.variant_types ?? []\n                        )}\n                      </Td>\n                    </Tr>\n                  ))}\n                </Tbody>\n              </Table>\n\n              <Flex pt={\"5\"} justifyContent={\"space-between\"} mb={5}>\n                <Text fontSize={\"sm\"}>Total {products?.total}</Text>\n                <Flex alignItems={\"center\"}>\n                  <Button\n                    size={\"sm\"}\n                    isDisabled={(products?.current_page ?? 0) <= 1}\n                    fontWeight={\"normal\"}\n                    onClick={() => {\n                      handlePrevPage();\n                    }}\n                  >\n                    Prev\n                  </Button>\n                  <Text px={3}>\n                    {products?.current_page} of {products?.total_page}\n                  </Text>\n                  <Button\n                    size={\"sm\"}\n                    isDisabled={\n                      (products?.current_page ?? 0) >=\n                      (products?.total_page ?? 0)\n                    }\n                    fontWeight={\"normal\"}\n                    onClick={() => {\n                      handleNextPage();\n                    }}\n                  >\n                    Next\n                  </Button>\n                </Flex>\n              </Flex>\n            </TableContainer>\n          </ModalBody>\n          <ModalFooter justifyContent={\"end\"}>\n            <Button variant=\"ghost\" mr={3} onClick={props.onClose}>\n              Cancel\n            </Button>\n            <Button\n              variant={\"solid\"}\n              colorScheme={\"red\"}\n              isLoading={props.isLoading}\n              onClick={() => props.onConfirm(checked)}\n            >\n              Confirm\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n\nexport default PromotionShopProduct;\n","import {\n  Button,\n  ButtonGroup,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Divider,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  SimpleGrid,\n  Skeleton,\n  Text,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { BsPlusCircle } from \"react-icons/bs\";\nimport * as Yup from \"yup\";\nimport useToast from \"../../../hooks/useToast\";\nimport {\n  IPromotionBulkForm,\n  IPromotionForm,\n  IPromotionProductForm,\n  IPromotionProps,\n  IShopPromotionPayload,\n  IShopPromotionProductPayload,\n} from \"../../../interfaces/Promotion\";\nimport PromotionBulkForm from \"./PromotionBulkForm\";\nimport PromotionProductForm from \"./PromotionProductForm\";\nimport PromotionShopProduct from \"./PromotionShopProduct\";\n\nfunction PromotionForm(props: IPromotionProps) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const { errorToast } = useToast();\n  const [checked, setChecked] = useState<IPromotionProductForm[]>([]);\n\n  const promotionValidationSchema = Yup.object().shape({\n    name: Yup.string().required(\"Required\"),\n    start_date: Yup.date().required(\"Required\"),\n    expiry_date: Yup.date()\n      .required(\"Required\")\n      .min(\n        Yup.ref(\"start_date\"),\n        \"expiry date must be greater or equal than start date\"\n      )\n      .test(\n        \"current date\",\n        \"expiry date must be greater or equal than current date\",\n        (value) => {\n          return value !== undefined && value >= new Date();\n        }\n      ),\n    products: Yup.array().of(\n      Yup.object().shape({\n        variants: Yup.array().of(\n          Yup.object().shape({\n            quota: Yup.number().when(\"is_active\", {\n              is: true,\n              then: Yup.number()\n                .min(1, \"Must be greater than 0\")\n                .required(\"Required\"),\n            }),\n            benefit: Yup.number().lessThan(\n              Yup.ref(\"price\"),\n              `benefit must be less than price`\n            ),\n            benefit_percentage: Yup.number().when(\"is_active\", {\n              is: true,\n              then: Yup.number()\n                .min(0, \"min 0 and max 100\")\n                .max(100, \"min 0 and max 100\")\n                .when(\"benefit\", {\n                  is: (benefit: number) => benefit > 0,\n                  then: (b) =>\n                    b.test(\n                      \"benefit_percentage\",\n                      \"fill in one of the benefit or benefit percentage fields\",\n                      (value) => value === undefined || value === 0\n                    ),\n                })\n                .when(\"benefit\", {\n                  is: (benefit: number) =>\n                    benefit === 0 || benefit === undefined,\n                  then: (b) =>\n                    b.test(\n                      \"benefit_percentage\",\n                      \"fill in one of the benefit or benefit percentage fields\",\n                      (value) => value !== undefined && value !== 0\n                    ),\n                }),\n            }),\n            max_buy_qty: Yup.number().when(\"is_active\", {\n              is: true,\n              then: Yup.number().required(\"Required\"),\n            }),\n          })\n        ),\n      })\n    ),\n  });\n\n  const initialPromotionForm: IPromotionForm = {\n    id: props.id,\n    name: props.name,\n    start_date: props.start_date,\n    expiry_date: props.expiry_date,\n    products: props.product,\n  };\n\n  const handleAddProduct = (\n    setValues: (\n      values: React.SetStateAction<IPromotionForm>,\n      shouldValidate?: boolean | undefined\n    ) => void,\n    values: IPromotionForm,\n    products: IPromotionProductForm[]\n  ) => {\n    let newProducts: IPromotionProductForm[] = [];\n\n    products.forEach((product) => {\n      if (product.in_form === false) {\n        newProducts.push({ ...product, in_form: true });\n      }\n    });\n\n    setValues({ ...values, products: [...values.products, ...newProducts] });\n    setChecked([...checked, ...newProducts]);\n    onClose();\n  };\n\n  const handleDeleteProduct = (productId: number) => {\n    setChecked(checked.filter((product) => product.id !== productId));\n  };\n\n  const handleSubmitForm = (values: IPromotionForm) => {\n    const shopPromotionProducts: IShopPromotionProductPayload[] = [];\n\n    values.products.forEach((product) => {\n      product.variants.forEach((variant) => {\n        if (variant.is_active) {\n          const shopPromotionProduct: IShopPromotionProductPayload = {\n            product_id: product.id,\n            product_name: product.name,\n            variant_type_id: variant.variant_type_id,\n            variant_type_name: variant.variant_name,\n            benefit: Number(variant.benefit),\n            benefit_percentage: Number(variant.benefit_percentage),\n            max_buy_qty: variant.max_buy_qty,\n            quota: variant.quota,\n          };\n          shopPromotionProducts.push(shopPromotionProduct);\n        }\n      });\n    });\n\n    const payload: IShopPromotionPayload = {\n      id: values.id,\n      name: values.name,\n      start_date: values.start_date,\n      expiry_date: values.expiry_date,\n      shop_promotion_products: shopPromotionProducts,\n    };\n\n    if (payload.shop_promotion_products.length <= 0) {\n      errorToast(\"Required product promotion min 1 active\");\n      return;\n    }\n\n    props.onSubmit(payload);\n  };\n\n  const handleBulkUpdate = (\n    valBulk: IPromotionBulkForm,\n    isError: boolean,\n    valPromo: IPromotionForm,\n    setValues: (\n      values: React.SetStateAction<IPromotionForm>,\n      shouldValidate?: boolean | undefined\n    ) => void\n  ) => {\n    if (isError) {\n      return;\n    }\n\n    let newProducts: IPromotionProductForm[] = [];\n    valPromo.products.forEach((product, indexPrduct) => {\n      newProducts[indexPrduct] = {\n        ...product,\n        variants: [],\n      };\n\n      product.variants.forEach((variant, indexVariant) => {\n        newProducts[indexPrduct].variants[indexVariant] = variant;\n        if (variant.is_active) {\n          newProducts[indexPrduct].variants[indexVariant] = {\n            ...variant,\n            quota:\n              typeof valBulk.quota !== \"number\" ? variant.quota : valBulk.quota,\n            benefit:\n              typeof valBulk.benefit !== \"number\" ||\n              variant.benefit_percentage > 0\n                ? variant.benefit\n                : valBulk.benefit,\n            benefit_percentage:\n              typeof valBulk.benefit_percentage !== \"number\" ||\n              variant.benefit > 0\n                ? variant.benefit_percentage\n                : valBulk.benefit_percentage,\n            max_buy_qty:\n              typeof valBulk.max_buy_qty !== \"number\"\n                ? variant.max_buy_qty\n                : valBulk.max_buy_qty,\n          };\n        }\n      });\n    });\n\n    setValues({\n      ...valPromo,\n      products: newProducts,\n    });\n  };\n\n  useEffect(() => {\n    setChecked(props.product);\n  }, [props.product]);\n\n  return (\n    <>\n      <Card variant={\"outline\"} rounded={\"lg\"} p={5} bgColor={\"white\"}>\n        <CardHeader>\n          <Flex justifyContent={\"space-between\"}>\n            <Text fontSize={\"2xl\"} fontWeight=\"bold\">\n              {props.title}\n            </Text>\n          </Flex>\n        </CardHeader>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialPromotionForm}\n          validationSchema={promotionValidationSchema}\n          onSubmit={(values) => {\n            handleSubmitForm(values);\n          }}\n        >\n          {({ handleChange, setValues, errors, touched, values }) => {\n            return (\n              <>\n                <Form>\n                  <CardBody>\n                    <SimpleGrid\n                      columns={{\n                        base: 1,\n                        sm: 1,\n                        md: 3,\n                      }}\n                      spacingX={10}\n                      spacingY={5}\n                    >\n                      <FormControl isInvalid={!!errors.name && touched.name}>\n                        <FormLabel>Name</FormLabel>\n                        <Skeleton isLoaded={!props.isLoading}>\n                          <Field\n                            as={Input}\n                            type=\"text\"\n                            name=\"name\"\n                            variant={props.isDisabled ? \"filled\" : \"outline\"}\n                            isDisabled={props.isDisabled}\n                            _disabled={{\n                              opacity: 1,\n                            }}\n                          />\n                        </Skeleton>\n                        <FormErrorMessage>{errors.name}</FormErrorMessage>\n                      </FormControl>\n                      <FormControl\n                        isInvalid={!!errors.start_date && touched.start_date}\n                      >\n                        <FormLabel>Start Date</FormLabel>\n                        <Skeleton isLoaded={!props.isLoading}>\n                          <Field\n                            as={Input}\n                            type=\"datetime-local\"\n                            name=\"start_date\"\n                            variant={props.isDisabled ? \"filled\" : \"outline\"}\n                            isDisabled={props.isDisabled}\n                            _disabled={{\n                              opacity: 1,\n                            }}\n                          />\n                        </Skeleton>\n                        <FormErrorMessage>{errors.start_date}</FormErrorMessage>\n                      </FormControl>\n                      <FormControl\n                        isInvalid={!!errors.expiry_date && touched.expiry_date}\n                      >\n                        <FormLabel>Expiry Date</FormLabel>\n                        <Skeleton isLoaded={!props.isLoading}>\n                          <Field\n                            as={Input}\n                            type=\"datetime-local\"\n                            name=\"expiry_date\"\n                            variant={props.isDisabled ? \"filled\" : \"outline\"}\n                            isDisabled={props.isDisabled}\n                            _disabled={{\n                              opacity: 1,\n                            }}\n                          />\n                        </Skeleton>\n                        <FormErrorMessage>\n                          {errors.expiry_date}\n                        </FormErrorMessage>\n                      </FormControl>\n                    </SimpleGrid>\n                    <Divider my={10} />\n\n                    <Flex\n                      justifyContent={\"space-between\"}\n                      alignItems={\"center\"}\n                      flexDirection={{\n                        base: \"column\",\n                        sm: \"row\",\n                      }}\n                      my={5}\n                    >\n                      <Text fontWeight={\"medium\"} fontSize={\"lg\"}>\n                        Product Promotion\n                      </Text>\n                      {props.isDisabled ? null : (\n                        <Button\n                          leftIcon={<BsPlusCircle />}\n                          variant={\"outline\"}\n                          isDisabled={props.isDisabled}\n                          onClick={onOpen}\n                        >\n                          Add Product\n                        </Button>\n                      )}\n                    </Flex>\n\n                    {!props.isDisabled ? (\n                      <PromotionBulkForm\n                        onSubmit={(valBulk, isError) =>\n                          handleBulkUpdate(valBulk, isError, values, setValues)\n                        }\n                      />\n                    ) : null}\n\n                    <PromotionProductForm\n                      values={values}\n                      errors={errors}\n                      touched={touched}\n                      isLoading={props.isLoading}\n                      isDisabled={props.isDisabled}\n                      handleChange={handleChange}\n                      onDeleteProduct={(productId) =>\n                        handleDeleteProduct(productId)\n                      }\n                    />\n                  </CardBody>\n                  <CardFooter>\n                    <ButtonGroup spacing=\"2\">\n                      <Button\n                        variant=\"solid\"\n                        colorScheme=\"gray\"\n                        onClick={() => props.onCancel()}\n                      >\n                        Cancel\n                      </Button>\n                      {props.isDisabled ? null : (\n                        <Button\n                          variant={\"primary\"}\n                          type=\"submit\"\n                          isLoading={props.isLoading}\n                        >\n                          Save\n                        </Button>\n                      )}\n                    </ButtonGroup>\n                  </CardFooter>\n                </Form>\n\n                <PromotionShopProduct\n                  isLoading={false}\n                  isOpen={isOpen}\n                  checkedProduct={checked}\n                  onClose={onClose}\n                  onConfirm={(products) => {\n                    console.log(products);\n                    handleAddProduct(setValues, values, products);\n                  }}\n                />\n              </>\n            );\n          }}\n        </Formik>\n      </Card>\n    </>\n  );\n}\n\nexport default PromotionForm;\n"],"names":["getAllShopPromotions","status","page","limit","instance","API_PATH","response","data","getShopPromotion","id","postShopPromotion","payload","putShopPromotion","useState","isLoading","setIsLoading","shopPromotion","setShopPromotion","shopPromotions","setShopPromotions","fetchAllShopPromotions","shopPromotionService","is_success","fetchShopPromotion","addShopPromotion","updateShopPromotion","convertVariantProductToProductForm","variantProducts","newProductForm","filter","variant","index","findIndex","other","product_id","forEach","productGroup","name","product_name","in_form","variants","val","push","price","benefit","benefit_percentage","is_active","quota","variant_type_id","variant_name","variant_type_name","max_buy_qty","addProductVariationFormNotActive","productsForm","products","result","productForm","product","variant_group","variant_types","isAvailable","variantForm","ind","props","input","setInput","inputError","setInputError","inputDisabled","setInputDisabled","handleChangeInput","e","currentTarget","value","Number","validateInputError","isError","prev","rounded","border","borderColor","p","my","columns","base","sm","md","xl","spacingX","spacingY","isInvalid","type","onChange","children","isDisabled","_disabled","opacity","handleChangeInputBenefit","handleChangeInputBenefitPercentage","justifyContent","mt","onClick","onSubmit","handleOnSubmit","isLoaded","py","Tr","Th","isNumeric","render","arrayHelpers1","values","length","Td","colSpan","textAlign","map","index1","bgColor","label","icon","onDeleteProduct","remove","index2","verticalAlign","colorScheme","formatCurrency","alignItems","getIn","errors","touched","as","Input","minWidth","borderStartRadius","min","max","borderEndRadius","size","isChecked","handleChange","fetchShopProducts","useProduct","setProducts","checked","setChecked","productId","some","convertProductToProductForm","inForm","newVariants","textProductPrice","high","Math","v","low","useEffect","then","checkedProduct","isOpen","onClose","event","item","handleCheckProduct","target","unit_sold","pt","mb","fontSize","total","current_page","fontWeight","handlePrevPage","px","total_page","handleNextPage","mr","onConfirm","useDisclosure","onOpen","errorToast","useToast","promotionValidationSchema","Yup","shape","required","start_date","expiry_date","test","undefined","Date","of","when","is","lessThan","b","initialPromotionForm","title","enableReinitialize","initialValues","validationSchema","shopPromotionProducts","shopPromotionProduct","shop_promotion_products","handleSubmitForm","setValues","flexDirection","leftIcon","valBulk","valPromo","newProducts","indexPrduct","indexVariant","handleBulkUpdate","handleDeleteProduct","spacing","onCancel","console","log","handleAddProduct"],"sourceRoot":""}