{"version":3,"file":"static/js/1543.b44c808c.chunk.js","mappings":"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","sources":["api/service/auth.ts","hooks/useTitle.ts","pages/Auth/RegisterMerchant.tsx"],"sourcesContent":["import { AxiosError } from \"axios\";\nimport {\n  IChangePasswordRequestPayload,\n  ILoginGoogleRequestPayload,\n  ILoginRequestPayload,\n  ILoginResponsePayload,\n  IPasswordResponsePayload,\n  IRefreshRequestPayload,\n  IRefreshResponsePayload,\n  IRegisterMerchantRequestPayload,\n  IRegisterRequestPayload,\n  IRegisterResponsePayload,\n  IResetPasswordRequestPayload,\n} from \"../../interfaces/Auth\";\nimport instance from \"../config/axios\";\nimport { API_PATH } from \"../path\";\n\nconst register = async (\n  payload: IRegisterRequestPayload\n): Promise<IRegisterResponsePayload> => {\n  try {\n    const response = await instance.post<IRegisterResponsePayload>(\n      API_PATH.auth.REGISTER,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRegisterResponsePayload;\n  }\n};\n\nconst registerMerchant = async (\n  payload: IRegisterMerchantRequestPayload\n): Promise<IRegisterResponsePayload> => {\n  try {\n    const response = await instance.post<IRegisterResponsePayload>(\n      API_PATH.auth.REGISTER_MERCHANT,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRegisterResponsePayload;\n  }\n};\n\nconst login = async ({\n  email,\n  password,\n}: ILoginRequestPayload): Promise<ILoginResponsePayload> => {\n  try {\n    const response = await instance.post<ILoginResponsePayload>(\n      API_PATH.auth.LOGIN,\n      {\n        email,\n        password,\n      }\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ILoginResponsePayload;\n  }\n};\n\nconst loginGoogle = async (\n  payload: ILoginGoogleRequestPayload\n): Promise<ILoginResponsePayload> => {\n  try {\n    const response = await instance.post<ILoginResponsePayload>(\n      API_PATH.auth.LOGIN_GOOGLE,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as ILoginResponsePayload;\n  }\n};\n\nconst refresh = async (\n  payload: IRefreshRequestPayload\n): Promise<IRefreshResponsePayload> => {\n  try {\n    const response = await instance.post<IRefreshResponsePayload>(\n      API_PATH.auth.REFRESH,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IRefreshResponsePayload;\n  }\n};\n\nconst checkEmail = async (email: string) => {\n  try {\n    const response = await instance.post(API_PATH.user.PROFILE, { email });\n\n    if (response.status >= 200 && response.status <= 300) {\n      return response.data;\n    }\n  } catch (e: unknown) {\n    const error = e as AxiosError;\n    return error.response?.data;\n  }\n};\n\nconst resetPassword = async (\n  payload: IResetPasswordRequestPayload\n): Promise<IPasswordResponsePayload> => {\n  try {\n    const response = await instance.post<IPasswordResponsePayload>(\n      API_PATH.auth.PASSWORD,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPasswordResponsePayload;\n  }\n};\n\nconst changePassword = async (\n  payload: IChangePasswordRequestPayload\n): Promise<IPasswordResponsePayload> => {\n  try {\n    const response = await instance.put<IPasswordResponsePayload>(\n      API_PATH.auth.PASSWORD,\n      payload\n    );\n\n    return response.data;\n  } catch (err) {\n    return err as IPasswordResponsePayload;\n  }\n};\n\nconst authService = {\n  register,\n  registerMerchant,\n  login,\n  loginGoogle,\n  refresh,\n  checkEmail,\n  resetPassword,\n  changePassword,\n};\n\nexport default authService;\n","import React, { useEffect } from \"react\";\n\nconst useTitle = (title = \"BAZR\") => {\n  const titleDom = document.getElementById(\"title\") as HTMLTitleElement;\n\n  useEffect(() => {\n    titleDom.innerHTML = title;\n  }, [title]);\n};\n\nexport default useTitle;\n","import {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  Input,\n} from \"@chakra-ui/react\";\nimport { Field, Formik } from \"formik\";\nimport { useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport authService from \"../../api/service/auth\";\nimport useTitle from \"../../hooks/useTitle\";\nimport useToast from \"../../hooks/useToast\";\nimport routes from \"../../routes/Routes\";\n\nconst RegisterMerchant = () => {\n  useTitle(\"Merchant Registration | BAZR\");\n  const { state } = useLocation();\n  const navigate = useNavigate();\n  const { successToast, errorToast } = useToast();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmitRegister = async (payload: {\n    name: string;\n    username: string;\n  }) => {\n    setIsLoading(true);\n\n    const response = await authService\n      .registerMerchant(payload)\n      .finally(() => setIsLoading(false));\n    if (response.is_success) {\n      successToast(\"Your shop account has been created!\");\n      navigate(routes.SELLER_HOME);\n    } else {\n      errorToast(\"Failed to register shop account\", response.message);\n    }\n  };\n\n  const registerValidationSchema = Yup.object().shape({\n    name: Yup.string()\n      .required(\"Required\")\n      .matches(/^[a-zA-Z ]*$/, \"Must not contain any number\"),\n    username: Yup.string()\n      .required(\"Required\")\n      .matches(/^[a-zA-Z0-9]*$/, \"Must not contain any space and symbol\"),\n  });\n\n  return (\n    <>\n      <Box textAlign=\"center\">\n        <Heading>Sign up as a Merchant</Heading>\n      </Box>\n\n      <Box textAlign=\"left\" mt={4}>\n        <Formik\n          initialValues={{\n            name: \"\",\n            username: \"\",\n          }}\n          validationSchema={registerValidationSchema}\n          onSubmit={(values) => {\n            handleSubmitRegister(values);\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <FormControl\n                mt={4}\n                isInvalid={!!errors.name && touched.name}\n                isDisabled={state ? true : false}\n              >\n                <FormLabel>Shop Name</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"name\"\n                  type=\"text\"\n                  placeholder=\"Enter your shop name\"\n                  variant=\"filled\"\n                />\n                <FormErrorMessage>{errors.name}</FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mt={4}\n                isInvalid={!!errors.username && touched.username}\n              >\n                <FormLabel>Shop Username</FormLabel>\n                <Field\n                  as={Input}\n                  name=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter your shop username\"\n                  variant=\"filled\"\n                />\n                <FormErrorMessage>{errors.username}</FormErrorMessage>\n              </FormControl>\n\n              <Button\n                variant=\"primary\"\n                width=\"full\"\n                mt={10}\n                type=\"submit\"\n                isLoading={isLoading}\n              >\n                Sign up\n              </Button>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </>\n  );\n};\n\nexport default RegisterMerchant;\n"],"names":["register","payload","instance","API_PATH","response","data","registerMerchant","login","email","password","loginGoogle","refresh","checkEmail","status","error","resetPassword","changePassword","authService","title","titleDom","document","getElementById","useEffect","innerHTML","useTitle","state","useLocation","navigate","useNavigate","useToast","successToast","errorToast","useState","isLoading","setIsLoading","handleSubmitRegister","finally","is_success","routes","message","registerValidationSchema","Yup","shape","name","required","matches","username","textAlign","mt","initialValues","validationSchema","onSubmit","values","handleSubmit","errors","touched","isInvalid","isDisabled","as","Input","type","placeholder","variant","width"],"sourceRoot":""}